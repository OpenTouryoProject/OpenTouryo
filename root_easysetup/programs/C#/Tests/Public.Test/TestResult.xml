<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Public.Test.nunit" total="2333" errors="3" failures="92" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2014-06-19" time="12:37:59">
  <environment nunit-version="2.6.3.13283" clr-version="2.0.50727.5477" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="C:\Program Files\NUnit 2.6.3\bin" machine-name="HISOL8083698" user="seigi" user-domain="HISOL8083698" />
  <culture-info current-culture="ja-JP" current-uiculture="ja-JP" />
  <test-suite type="Project" name="C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Public.Test.nunit" executed="True" result="Failure" success="False" time="15.717" asserts="0">
    <results>
      <test-suite type="Assembly" name="C:\OpenTouryo\root\programs\C#\Tests\Public.Test\.\bin\Debug\Public.Test.dll" executed="True" result="Failure" success="False" time="15.716" asserts="0">
        <results>
          <test-suite type="Namespace" name="Public" executed="True" result="Failure" success="False" time="15.716" asserts="0">
            <results>
              <test-suite type="Namespace" name="Test" executed="True" result="Failure" success="False" time="15.715" asserts="0">
                <results>
                  <test-suite type="Namespace" name="IO" executed="True" result="Failure" success="False" time="5.966" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ASymmetricCryptographyTest" executed="True" result="Success" success="True" time="0.173" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="EncryptStringTest" executed="True" result="Success" success="True" time="0.172" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-001N&quot;,&quot;abcde&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-002N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.006" asserts="2" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-003L&quot;,&quot;&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.004" asserts="2" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-004A&quot;,null,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-005A&quot;,&quot;abcde&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,&quot;dummy&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-006A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,&quot;dummy&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-007A&quot;,&quot;&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,&quot;dummy&quot;)" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-008A&quot;,null,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,&quot;dummy&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-009A&quot;,&quot;abcde&quot;,&quot;dummy&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-010A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;dummy&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-011A&quot;,&quot;&quot;,&quot;dummy&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-012A&quot;,null,&quot;dummy&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-013A&quot;,&quot;abcde&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-014A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-015A&quot;,&quot;&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-016A&quot;,null,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-017A&quot;,&quot;abcde&quot;,&quot;&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-018A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-019A&quot;,&quot;&quot;,&quot;&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-020A&quot;,null,&quot;&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-021A&quot;,&quot;abcde&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-022A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-023A&quot;,&quot;&quot;,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-024A&quot;,null,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;&quot;,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-025A&quot;,&quot;abcde&quot;,null,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-026A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,null,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-027A&quot;,&quot;&quot;,null,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.ASymmetricCryptographyTest.EncryptStringTest(&quot;TestID-028A&quot;,null,null,&quot;&lt;RSAKeyValue&gt;&lt;Modulus&gt;zWaOt+w3bwJvS5q/B0hr0SuYOHlguadciqerjQwl4iOM8d9hhhwaybmrlI9WSVDXJpG+z1UqXNNSs/+Mudxl96IGEznaDK0NQqo0y4+VJnj8MrblWpEg8zam6k2UIv4JC3l+Ju5g1U4an4wSYooUZ2503aEpUk1KDMt3DjcXp6k=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;++TGm/2p0n0kqEAySSq+xrcWvc1p/dOBFB/4saB5Q2J0eeMTjHBh4XcVmJZxE4Hm6KI/3GRCkUtfibhsq+gQAQ==&lt;/P&gt;&lt;Q&gt;0L/AwIFEDmz5RijEsmex98n7n/6VYv0/QrH8gioOYZ2p5PM7GfBJ0SLj0kdpyRikQKsfde1Lndp6EgG/kXUXqQ==&lt;/Q&gt;&lt;DP&gt;Wq40VanO/gixLqTVtYNe5Ji65h9R3d/LYxxTYla78Oc7uTlnKzK1+f3t112pXXVxVCQ8yzGIyVeSEDlFXemQAQ==&lt;/DP&gt;&lt;DQ&gt;ZUBdEgKhLA4Xarxji9VYMUQ7VIN7miQUBxmlzMzxZM/AlFiWFiLC6zntHxWcbfoR0XwvKlgLEWnjQ9CtRrRw4Q==&lt;/DQ&gt;&lt;InverseQ&gt;9g+T/fVogOr+ZQRWXYc/5dZ7Bzs9tT5UbKwdnuAJt7gRH9k6mnwW7psfQh9SUViPItPM+lMLgtLQ1n7xT6ez8w==&lt;/InverseQ&gt;&lt;D&gt;YZvjJrQyg6Z8jUk0jplz4yr8Y5oKxS8rYxjbBWRIfHa4fBjTl4+zizmYuDiFoMGx/Lo2GwE16HbkTnWawphiO7jzaiv/KVuJN+OmsZbE0ueTq4Or8RG8ivCjmvZuQEzHWSXZrYZJzXwAXvJYrEFcL7kNU5DUKHbKbSi6cgjjAAE=&lt;/D&gt;&lt;/RSAKeyValue&gt;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="BinarySerializeTest" description="Tests for Binary Serialize" executed="True" result="Success" success="True" time="0.061" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="BytesToObjectTest" executed="True" result="Success" success="True" time="0.028" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.BinarySerializeTest.BytesToObjectTest(&quot;TestID-001N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.IO.BinarySerializeTest.BytesToObjectTest(&quot;TestID-002N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.IO.BinarySerializeTest.BytesToObjectTest(&quot;TestID-003N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.IO.BinarySerializeTest.BytesToObjectTest(&quot;TestID-004N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.IO.BinarySerializeTest.BytesToObjectTest(&quot;TestID-005N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.IO.BinarySerializeTest.BytesToObjectTest(&quot;TestID-006N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.IO.BinarySerializeTest.BytesToObjectTest(&quot;TestID-007A&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="DeepCloneTest" executed="True" result="Success" success="True" time="0.009" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.BinarySerializeTest.DeepCloneTest(&quot;TestID-001N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.BinarySerializeTest.DeepCloneTest(&quot;TestID-002N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.BinarySerializeTest.DeepCloneTest(&quot;TestID-003A&quot;,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ObjectToBytesTest" executed="True" result="Success" success="True" time="0.015" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.BinarySerializeTest.ObjectToBytesTest(&quot;TestID-001N&quot;,&quot;StringtoBytes&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.BinarySerializeTest.ObjectToBytesTest(&quot;TestID-002N&quot;,598)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.BinarySerializeTest.ObjectToBytesTest(&quot;TestID-003N&quot;,06/19/2014 12:35:39)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.BinarySerializeTest.ObjectToBytesTest(&quot;TestID-004A&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.BinarySerializeTest.ObjectToBytesTest(&quot;TestID-005A&quot;,null)" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EmbeddedResourceLoaderTest" description="Tests for Embedded Resource Loader" executed="True" result="Failure" success="False" time="0.541" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="Exists1Test" executed="True" result="Failure" success="False" time="0.135" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.Exists1Test(&quot;TestID-001N&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.Exists1Test(&quot;TestID-002N&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.Exists1Test(&quot;TestID-003N&quot;,&quot;&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,False)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.Exists1Test(&quot;TestID-004A&quot;,&quot;&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,True)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.Exists(String assemblyString, String loadfileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 148
場所 Public.Test.IO.EmbeddedResourceLoaderTest.Exists1Test(String testCaseID, String assemblyString, String loadfileName, Boolean throwException) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 138
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.Exists1Test(&quot;TestID-005A&quot;,null,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,False)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.Exists1Test(&quot;TestID-006A&quot;,null,null,False)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.Exists1Test(&quot;TestID-007A&quot;,null,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,True)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.Exists(String assemblyString, String loadfileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 148
場所 Public.Test.IO.EmbeddedResourceLoaderTest.Exists1Test(String testCaseID, String assemblyString, String loadfileName, Boolean throwException) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 138
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.Exists1Test(&quot;TestID-008A&quot;,null,null,True)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.Exists(String assemblyString, String loadfileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 148
場所 Public.Test.IO.EmbeddedResourceLoaderTest.Exists1Test(String testCaseID, String assemblyString, String loadfileName, Boolean throwException) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 138
]]></stack-trace>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ExistsTest" executed="True" result="Failure" success="False" time="0.059" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.ExistsTest(&quot;TestID-005A&quot;,&quot;&quot;,True)" executed="True" result="Failure" success="False" time="0.005" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.Exists(String assemblyString, String loadfileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 148
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.Exists(String loadfileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 105
場所 Public.Test.IO.EmbeddedResourceLoaderTest.ExistsTest(String testCaseID, String loadfileName, Boolean throwException) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 119
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.ExistsTest(&quot;TestID-006A&quot;,null,True)" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.Exists(String assemblyString, String loadfileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 148
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.Exists(String loadfileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 105
場所 Public.Test.IO.EmbeddedResourceLoaderTest.ExistsTest(String testCaseID, String loadfileName, Boolean throwException) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 119
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.ExistsTest(&quot;TestID-001N&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,False)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.ExistsTest(&quot;TestID-002N&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,True)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.Exists(String assemblyString, String loadfileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 148
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.Exists(String loadfileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 105
場所 Public.Test.IO.EmbeddedResourceLoaderTest.ExistsTest(String testCaseID, String loadfileName, Boolean throwException) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 119
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.ExistsTest(&quot;TestID-003N&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource1.resources&quot;,False)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.ExistsTest(&quot;TestID-004A&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource1.resources&quot;,True)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource1.resources]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.Exists(String assemblyString, String loadfileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 148
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.Exists(String loadfileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 105
場所 Public.Test.IO.EmbeddedResourceLoaderTest.ExistsTest(String testCaseID, String loadfileName, Boolean throwException) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 119
]]></stack-trace>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="LoadAsString1Test" executed="True" result="Failure" success="False" time="0.111" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(&quot;TestID-001N&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,System.Text.ASCIIEncoding)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(&quot;TestID-002N&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,System.Text.DBCSCodePageEncoding)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(&quot;TestID-003N&quot;,&quot;Framework&quot;,&quot;Touryo.Infrastructure.Framework.Resources.FrameworkExceptionMessageResource.resources&quot;,System.Text.UTF8Encoding)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Touryo.Infrastructure.Framework.Resources.FrameworkExceptionMessageResource.resources]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String assemblyString, String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 221
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(String testCaseID, String assemblyString, String loadfileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 205
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(&quot;TestID-004N&quot;,&quot;Framework&quot;,&quot;Touryo.Infrastructure.Framework.Resources.FrameworkExceptionMessageResource.resources&quot;,System.Text.UTF7Encoding)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Touryo.Infrastructure.Framework.Resources.FrameworkExceptionMessageResource.resources]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String assemblyString, String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 221
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(String testCaseID, String assemblyString, String loadfileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 205
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(&quot;TestID-005A&quot;,&quot;Publics&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,System.Text.ASCIIEncoding)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String assemblyString, String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 221
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(String testCaseID, String assemblyString, String loadfileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 205
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(&quot;TestID-006A&quot;,&quot;Publics&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,System.Text.DBCSCodePageEncoding)" executed="True" result="Failure" success="False" time="0.003" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String assemblyString, String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 221
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(String testCaseID, String assemblyString, String loadfileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 205
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(&quot;TestID-007A&quot;,&quot;Frameworks&quot;,&quot;Touryo.Infrastructure.Public.Resources.FrameworkExceptionMessageResource.resources&quot;,System.Text.UTF8Encoding)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Touryo.Infrastructure.Public.Resources.FrameworkExceptionMessageResource.resources]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String assemblyString, String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 221
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(String testCaseID, String assemblyString, String loadfileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 205
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(&quot;TestID-008A&quot;,&quot;Frameworks&quot;,&quot;Touryo.Infrastructure.Public.Resources.FrameworkExceptionMessageResource.resources&quot;,System.Text.UTF8Encoding)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Touryo.Infrastructure.Public.Resources.FrameworkExceptionMessageResource.resources]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String assemblyString, String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 221
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(String testCaseID, String assemblyString, String loadfileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 205
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(&quot;TestID-009A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource1.resources&quot;,System.Text.DBCSCodePageEncoding)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource1.resources]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String assemblyString, String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 221
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(String testCaseID, String assemblyString, String loadfileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 205
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(&quot;TestID-0010A&quot;,&quot;Public&quot;,&quot;&quot;,System.Text.DBCSCodePageEncoding)" executed="True" result="Failure" success="False" time="0.003" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String assemblyString, String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 221
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(String testCaseID, String assemblyString, String loadfileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 205
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsString1Test(&quot;TestID-0011A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="LoadAsStringTest" executed="True" result="Failure" success="False" time="0.045" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsStringTest(&quot;TestID-001N&quot;,&quot;Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources&quot;,System.Text.ASCIIEncoding)" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Touryo.Infrastructure.Public.Resources.PublicExceptionMessageResource.resources]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String assemblyString, String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 221
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 169
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsStringTest(String testCaseID, String loadfileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 176
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsStringTest(&quot;TestID-002A&quot;,&quot;&quot;,System.Text.UTF32Encoding)" executed="True" result="Failure" success="False" time="0.003" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String assemblyString, String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 221
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 169
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsStringTest(String testCaseID, String loadfileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 176
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsStringTest(&quot;TestID-003A&quot;,&quot;&quot;,System.Text.UTF8Encoding)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String assemblyString, String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 221
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 169
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsStringTest(String testCaseID, String loadfileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 176
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsStringTest(&quot;TestID-004A&quot;,null,null)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String assemblyString, String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 221
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadAsString(String loadfileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 169
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadAsStringTest(String testCaseID, String loadfileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 176
]]></stack-trace>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="LoadXMLAsString1Test" executed="True" result="Failure" success="False" time="0.076" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(&quot;TestID-001N&quot;,&quot;Public.Test&quot;,&quot;Public.Test.XMLLoadAsString.xml&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(&quot;TestID-002N&quot;,&quot;Public.Test&quot;,&quot;Public.Test.Load.xml&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(&quot;TestID-003A&quot;,&quot;&quot;,&quot;Public.Test.XMLLoadAsString.xml&quot;)" executed="True" result="Failure" success="False" time="0.005" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Public.Test.XMLLoadAsString.xml]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String assemblyString, String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 310
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(String testCaseID, String assemblyString, String loadfileName) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 276
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(&quot;TestID-004A&quot;,&quot;Public.Test&quot;,&quot;&quot;)" executed="True" result="Failure" success="False" time="0.003" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String assemblyString, String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 310
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(String testCaseID, String assemblyString, String loadfileName) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 276
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(&quot;TestID-005A&quot;,null,&quot;Public.Test.XMLLoadAsString.xml&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Public.Test.XMLLoadAsString.xml]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String assemblyString, String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 310
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(String testCaseID, String assemblyString, String loadfileName) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 276
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(&quot;TestID-006A&quot;,&quot;Public.Test&quot;,null)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String assemblyString, String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 310
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(String testCaseID, String assemblyString, String loadfileName) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 276
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(&quot;TestID-007A&quot;,&quot;Public.Test&quot;,&quot;Wrongfile.xml&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Wrongfile.xml]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String assemblyString, String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 310
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(String testCaseID, String assemblyString, String loadfileName) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 276
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(&quot;TestID-008A&quot;,&quot;Public.Test&quot;,&quot;Public.Test.Empty.xml&quot;)" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : XML宣言[]は不正です。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String assemblyString, String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 338
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsString1Test(String testCaseID, String assemblyString, String loadfileName) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 276
]]></stack-trace>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="LoadXMLAsStringTest" executed="True" result="Failure" success="False" time="0.058" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsStringTest(&quot;TestID-001N&quot;,&quot;Public.Test.XMLLoadAsString.xml&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Public.Test.XMLLoadAsString.xml]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String assemblyString, String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 310
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 257
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsStringTest(String testCaseID, String loadfileName) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 246
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsStringTest(&quot;TestID-002N&quot;,&quot;Public.Test.Load.xml&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Public.Test.Load.xml]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String assemblyString, String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 310
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 257
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsStringTest(String testCaseID, String loadfileName) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 246
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsStringTest(&quot;TestID-003N&quot;,&quot;Wrongfile.xml&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[Wrongfile.xml]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String assemblyString, String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 310
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 257
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsStringTest(String testCaseID, String loadfileName) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 246
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsStringTest(&quot;TestID-004A&quot;,&quot;&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String assemblyString, String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 310
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 257
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsStringTest(String testCaseID, String loadfileName) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 246
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsStringTest(&quot;TestID-005A&quot;,null)" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String assemblyString, String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 310
場所 Touryo.Infrastructure.Public.IO.EmbeddedResourceLoader.LoadXMLAsString(String loadfileName) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\EmbeddedResourceLoader.cs:行 257
場所 Public.Test.IO.EmbeddedResourceLoaderTest.LoadXMLAsStringTest(String testCaseID, String loadfileName) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\EmbeddedResourceLoaderTest.cs:行 246
]]></stack-trace>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ResourceLoaderTest" description="Tests for Resource Loader" executed="True" result="Failure" success="False" time="0.201" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="ExistsTest" executed="True" result="Failure" success="False" time="0.033" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest(&quot;TestID-001A&quot;,&quot;&quot;,True)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.ResourceLoader.Exists(String loadfilepath, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\ResourceLoader.cs:行 67
場所 Public.Test.IO.ResourceLoaderTest.ExistsTest(String testCaseID, String loadfilepath, Boolean throwException) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\ResourceLoaderTest.cs:行 106
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest(&quot;TestID-002A&quot;,&quot;&quot;,False)" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest(&quot;TestID-003A&quot;,null,null)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest(&quot;TestID-004N&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\ConditionalSearch.aspx&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest(&quot;TestID-005N&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\ConditionalSearch.aspx&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest(&quot;TestID-006A&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\1234.txt&quot;,False)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest(&quot;TestID-007A&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\1234.txt&quot;,True)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[C:\OpenTouryo\root\files\tools\DGenTemplates\1234.txt]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.ResourceLoader.Exists(String loadfilepath, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\ResourceLoader.cs:行 67
場所 Public.Test.IO.ResourceLoaderTest.ExistsTest(String testCaseID, String loadfilepath, Boolean throwException) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\ResourceLoaderTest.cs:行 106
]]></stack-trace>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ExistsTest1" executed="True" result="Failure" success="False" time="0.047" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest1(&quot;TestID-001A&quot;,&quot;&quot;,&quot;&quot;,True)" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.ResourceLoader.Exists(String filePath, String fileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\ResourceLoader.cs:行 102
場所 Public.Test.IO.ResourceLoaderTest.ExistsTest1(String testCaseID, String filePath, String fileName, Boolean throwException) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\ResourceLoaderTest.cs:行 142
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest1(&quot;TestID-002N&quot;,&quot;&quot;,&quot;&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest1(&quot;TestID-003A&quot;,null,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest1(&quot;TestID-004A&quot;,null,null,False)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest1(&quot;TestID-005N&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\&quot;,&quot;ConditionalSearch.aspx&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest1(&quot;TestID-006N&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\&quot;,&quot;ConditionalSearch.aspx&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest1(&quot;TestID-007N&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\&quot;,&quot;\\123.txt&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest1(&quot;TestID-008A&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\/&quot;,&quot;123.txt&quot;,True)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[C:\OpenTouryo\root\files\tools\DGenTemplates\/123.txt]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.ResourceLoader.Exists(String filePath, String fileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\ResourceLoader.cs:行 102
場所 Public.Test.IO.ResourceLoaderTest.ExistsTest1(String testCaseID, String filePath, String fileName, Boolean throwException) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\ResourceLoaderTest.cs:行 142
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.ResourceLoaderTest.ExistsTest1(&quot;TestID-009A&quot;,&quot;F&quot;,&quot;123.txt&quot;,True)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[F\123.txt]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.ResourceLoader.Exists(String filePath, String fileName, Boolean throwException) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\ResourceLoader.cs:行 102
場所 Public.Test.IO.ResourceLoaderTest.ExistsTest1(String testCaseID, String filePath, String fileName, Boolean throwException) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\ResourceLoaderTest.cs:行 142
]]></stack-trace>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="LoadAsString1Test" executed="True" result="Failure" success="False" time="0.056" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsString1Test(&quot;TestID-001N&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\&quot;,&quot;ConditionalSearch.aspx&quot;,System.Text.UTF8Encoding)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsString1Test(&quot;TestID-002N&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\&quot;,&quot;ConditionalSearch.aspx&quot;,System.Text.ASCIIEncoding)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsString1Test(&quot;TestID-003N&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\&quot;,&quot;ConditionalSearch.aspx&quot;,System.Text.UTF7Encoding)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsString1Test(&quot;TestID-004A&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\F&quot;,&quot;ConditionalSearch.aspx&quot;,System.Text.UTF8Encoding)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[C:\OpenTouryo\root\files\tools\DGenTemplates\F\ConditionalSearch.aspx]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.ResourceLoader.LoadAsString(String filePath, String fileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\ResourceLoader.cs:行 189
場所 Public.Test.IO.ResourceLoaderTest.LoadAsString1Test(String testCaseID, String filePath, String fileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\ResourceLoaderTest.cs:行 198
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsString1Test(&quot;TestID-005A&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\&quot;,&quot;123a.txt&quot;,System.Text.UTF8Encoding)" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[C:\OpenTouryo\root\files\tools\DGenTemplates\123a.txt]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.ResourceLoader.LoadAsString(String filePath, String fileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\ResourceLoader.cs:行 189
場所 Public.Test.IO.ResourceLoaderTest.LoadAsString1Test(String testCaseID, String filePath, String fileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\ResourceLoaderTest.cs:行 198
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsString1Test(&quot;TestID-006A&quot;,&quot;&quot;,&quot;123.txt&quot;,System.Text.UTF8Encoding)" executed="True" result="Failure" success="False" time="0.006" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[123.txt]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.ResourceLoader.LoadAsString(String filePath, String fileName, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\ResourceLoader.cs:行 189
場所 Public.Test.IO.ResourceLoaderTest.LoadAsString1Test(String testCaseID, String filePath, String fileName, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\ResourceLoaderTest.cs:行 198
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsString1Test(&quot;TestID-007A&quot;,null,&quot;123.txt&quot;,System.Text.UTF8Encoding)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsString1Test(&quot;TestID-008A&quot;,&quot;F\\&quot;,null,System.Text.UTF8Encoding)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="LoadAsStringTest" executed="True" result="Failure" success="False" time="0.033" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsStringTest(&quot;TestID-001N&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\ConditionalSearch.aspx&quot;,System.Text.UTF8Encoding)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsStringTest(&quot;TestID-002N&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\ConditionalSearch.aspx&quot;,System.Text.ASCIIEncoding)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsStringTest(&quot;TestID-003N&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\ConditionalSearch.aspx&quot;,System.Text.UTF7Encoding)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsStringTest(&quot;TestID-004A&quot;,null,System.Text.UTF8Encoding)" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.ResourceLoader.LoadAsString(String loadfilepath, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\ResourceLoader.cs:行 138
場所 Public.Test.IO.ResourceLoaderTest.LoadAsStringTest(String testCaseID, String loadfilepath, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\ResourceLoaderTest.cs:行 178
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsStringTest(&quot;TestID-005A&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\ConditionalSearch.aspx&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.ResourceLoaderTest.LoadAsStringTest(&quot;TestID-006A&quot;,&quot;C:\\OpenTouryo\\root\\files\\tools\\DGenTemplates\\123a.txt&quot;,System.Text.UTF7Encoding)" executed="True" result="Failure" success="False" time="0.003" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : リソースファイル[C:\OpenTouryo\root\files\tools\DGenTemplates\123a.txt]は見つかりませんでした。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.IO.ResourceLoader.LoadAsString(String loadfilepath, Encoding enc) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\IO\ResourceLoader.cs:行 138
場所 Public.Test.IO.ResourceLoaderTest.LoadAsStringTest(String testCaseID, String loadfilepath, Encoding enc) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\IO\ResourceLoaderTest.cs:行 178
]]></stack-trace>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SymmetricCryptographyTest" executed="True" result="Success" success="True" time="4.927" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="EncryptBytesTest" executed="True" result="Success" success="True" time="0.730" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-001N&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.038" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-002N&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-003L&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-004A&quot;,null,&quot;test@123&quot;,AesCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.018" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-005L&quot;,System.Byte[],&quot;&quot;,AesCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.042" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-006A&quot;,System.Byte[],null,AesCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-007N&quot;,System.Byte[],&quot;test@123&quot;,AesManaged)" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-008N&quot;,System.Byte[],&quot;test@123&quot;,AesManaged)" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-009L&quot;,System.Byte[],&quot;test@123&quot;,AesManaged)" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-010A&quot;,null,&quot;test@123&quot;,AesManaged)" executed="True" result="Success" success="True" time="0.019" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-011N&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-012N&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-013L&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-014A&quot;,null,&quot;test@123&quot;,TripleDESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-015N&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-016N&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-017L&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-018A&quot;,null,&quot;test@123&quot;,DESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-019N&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-020N&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-021L&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-022A&quot;,null,&quot;test@123&quot;,RC2CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-023N&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged)" executed="True" result="Success" success="True" time="0.043" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-024N&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged)" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-025L&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged)" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-026A&quot;,null,&quot;test@123&quot;,RijndaelManaged)" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-027N&quot;,System.Byte[],&quot;test@123&quot;,999)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-028N&quot;,System.Byte[],&quot;test@123&quot;,999)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-029L&quot;,System.Byte[],&quot;test@123&quot;,999)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest(&quot;TestID-030A&quot;,null,&quot;test@123&quot;,999)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="EncryptBytesTest2" executed="True" result="Success" success="True" time="1.851" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-000N&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.037" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-002N&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-003L&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.036" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-004A&quot;,null,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.018" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-005L&quot;,System.Byte[],&quot;&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-006A&quot;,System.Byte[],null,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-007N&quot;,System.Byte[],&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.037" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-008N&quot;,System.Byte[],&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.035" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-009L&quot;,System.Byte[],&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.032" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-010A&quot;,null,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.018" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-011N&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-012N&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.026" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-013L&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.022" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-014A&quot;,null,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-015N&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-016N&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-017L&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-018A&quot;,null,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-019N&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-020N&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.030" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-021L&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-022A&quot;,null,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-023N&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-024N&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-025L&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.032" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-026A&quot;,null,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.020" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-027N&quot;,System.Byte[],&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-028N&quot;,System.Byte[],&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-029L&quot;,System.Byte[],&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-030A&quot;,null,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-031N&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.037" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-032N&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-033L&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.039" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-034A&quot;,null,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.018" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-035L&quot;,System.Byte[],&quot;&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.035" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-036A&quot;,System.Byte[],null,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-037N&quot;,System.Byte[],&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-038N&quot;,System.Byte[],&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-039L&quot;,System.Byte[],&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-040A&quot;,null,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.018" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-041N&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-042N&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-043L&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-044A&quot;,null,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-045N&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-046N&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-047L&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.011" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-048A&quot;,null,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-049N&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-050N&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.022" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-051L&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.026" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-052A&quot;,null,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-053N&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.041" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-054N&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.038" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-055L&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-056A&quot;,null,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.019" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-057A&quot;,System.Byte[],&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-058A&quot;,System.Byte[],&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-059A&quot;,System.Byte[],&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-060A&quot;,null,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-061A&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-062A&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-063A&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-064A&quot;,null,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-065A&quot;,System.Byte[],&quot;&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-066A&quot;,System.Byte[],null,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-067A&quot;,System.Byte[],&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-068A&quot;,System.Byte[],&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-069A&quot;,System.Byte[],&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-070A&quot;,null,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-071A&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-072A&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-073A&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-074A&quot;,null,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-075A&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-076A&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-077A&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-078A&quot;,null,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-079A&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-080A&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-081A&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-082A&quot;,null,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-083A&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-084A&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-085A&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-086A&quot;,null,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-087A&quot;,System.Byte[],&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-088A&quot;,System.Byte[],&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-089A&quot;,System.Byte[],&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-090A&quot;,null,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-091A&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-092A&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-093A&quot;,System.Byte[],&quot;test@123&quot;,AesCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-094A&quot;,null,&quot;test@123&quot;,AesCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-095A&quot;,System.Byte[],&quot;&quot;,AesCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-096A&quot;,System.Byte[],null,AesCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-097A&quot;,System.Byte[],&quot;test@123&quot;,AesManaged,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-098A&quot;,System.Byte[],&quot;test@123&quot;,AesManaged,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-099A&quot;,System.Byte[],&quot;test@123&quot;,AesManaged,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-100A&quot;,null,&quot;test@123&quot;,AesManaged,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-101A&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-102A&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-103A&quot;,System.Byte[],&quot;test@123&quot;,TripleDESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-104A&quot;,null,&quot;test@123&quot;,TripleDESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-105A&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-106A&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-107A&quot;,System.Byte[],&quot;test@123&quot;,DESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-108A&quot;,null,&quot;test@123&quot;,DESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-109A&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-110A&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-111A&quot;,System.Byte[],&quot;test@123&quot;,RC2CryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-112A&quot;,null,&quot;test@123&quot;,RC2CryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-113A&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-114A&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-115A&quot;,System.Byte[],&quot;test@123&quot;,RijndaelManaged,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-116A&quot;,null,&quot;test@123&quot;,RijndaelManaged,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-117A&quot;,System.Byte[],&quot;test@123&quot;,999,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-118A&quot;,System.Byte[],&quot;test@123&quot;,999,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-119A&quot;,System.Byte[],&quot;test@123&quot;,999,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptBytesTest2(&quot;TestID-120A&quot;,null,&quot;test@123&quot;,999,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="EncryptStringTest" executed="True" result="Success" success="True" time="0.670" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-025L&quot;,&quot;&quot;,&quot;test@123&quot;,RijndaelManaged)" executed="True" result="Success" success="True" time="0.038" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-015N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,DESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.011" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-016N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,DESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-017L&quot;,&quot;&quot;,&quot;test@123&quot;,DESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-018A&quot;,null,&quot;test@123&quot;,DESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-019N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-020N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-021L&quot;,&quot;&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.035" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-022A&quot;,null,&quot;test@123&quot;,RC2CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-023N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,RijndaelManaged)" executed="True" result="Success" success="True" time="0.036" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-024N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,RijndaelManaged)" executed="True" result="Success" success="True" time="0.035" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-026A&quot;,null,&quot;test@123&quot;,RijndaelManaged)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-027A&quot;,&quot;abcde&quot;,&quot;test@123&quot;,999)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-028A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,999)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-029A&quot;,&quot;&quot;,&quot;test@123&quot;,999)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-030A&quot;,null,&quot;test@123&quot;,999)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-006A&quot;,&quot;abcde&quot;,null,AesCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-007N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,AesManaged)" executed="True" result="Success" success="True" time="0.042" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-008N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,AesManaged)" executed="True" result="Success" success="True" time="0.038" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-001N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,AesCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-014A&quot;,null,&quot;test@123&quot;,TripleDESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-003L&quot;,&quot;&quot;,&quot;test@123&quot;,AesCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.038" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-004A&quot;,null,&quot;test@123&quot;,AesCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-005L&quot;,&quot;abcde&quot;,&quot;&quot;,AesCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.038" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-002N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,AesCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.039" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-009L&quot;,&quot;&quot;,&quot;test@123&quot;,AesManaged)" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-010A&quot;,null,&quot;test@123&quot;,AesManaged)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-011N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-012N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.028" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest(&quot;TestID-013L&quot;,&quot;&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider)" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="EncryptStringTest2" executed="True" result="Success" success="True" time="1.647" asserts="0">
                            <results>
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-001N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-002N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-003L&quot;,&quot;&quot;,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-004A&quot;,null,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-005L&quot;,&quot;abcde&quot;,&quot;&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-006A&quot;,&quot;abcde&quot;,null,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-007N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.040" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-008N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-009L&quot;,&quot;&quot;,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.037" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-010A&quot;,null,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-011N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-012N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-013L&quot;,&quot;&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.021" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-014A&quot;,null,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-015N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.015" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-016N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-017L&quot;,&quot;&quot;,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.013" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-018A&quot;,null,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-019N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.030" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-020N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.025" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-021L&quot;,&quot;&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-022A&quot;,null,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-023N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-024N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-025L&quot;,&quot;&quot;,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-026A&quot;,null,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-027N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-028N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-029L&quot;,&quot;&quot;,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-030A&quot;,null,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-031N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-032N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.035" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-033L&quot;,&quot;&quot;,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-034A&quot;,null,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-035L&quot;,&quot;abcde&quot;,&quot;&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.036" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-036A&quot;,&quot;abcde&quot;,null,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-037N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.037" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-038N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.034" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-039L&quot;,&quot;&quot;,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.033" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-040A&quot;,null,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-041N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.024" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-042N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.027" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-043L&quot;,&quot;&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.026" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-044A&quot;,null,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-045N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.011" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-046N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-047L&quot;,&quot;&quot;,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-048A&quot;,null,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-049N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-050N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.028" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-051L&quot;,&quot;&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-052A&quot;,null,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-053N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.036" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-054N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.040" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-055L&quot;,&quot;&quot;,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.037" asserts="2" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-056A&quot;,null,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-057N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-058N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-059L&quot;,&quot;&quot;,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-060A&quot;,null,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-061N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-062N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-063L&quot;,&quot;&quot;,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-064A&quot;,null,&quot;test@123&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-065L&quot;,&quot;abcde&quot;,&quot;&quot;,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-066A&quot;,&quot;abcde&quot;,null,AesCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-067N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-068N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-069L&quot;,&quot;&quot;,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-070A&quot;,null,&quot;test@123&quot;,AesManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-071N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-072N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-073L&quot;,&quot;&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-074A&quot;,null,&quot;test@123&quot;,TripleDESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-075N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-076N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-077L&quot;,&quot;&quot;,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-078A&quot;,null,&quot;test@123&quot;,DESCryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-079N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-080N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-081L&quot;,&quot;&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-082A&quot;,null,&quot;test@123&quot;,RC2CryptoServiceProvider,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-083N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-084N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-085L&quot;,&quot;&quot;,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-086A&quot;,null,&quot;test@123&quot;,RijndaelManaged,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-087N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-088N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-089L&quot;,&quot;&quot;,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-090A&quot;,null,&quot;test@123&quot;,999,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-091N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,AesCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-092L&quot;,&quot;&quot;,&quot;test@123&quot;,AesCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-093A&quot;,null,&quot;test@123&quot;,AesCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-094L&quot;,&quot;abcde&quot;,&quot;&quot;,AesCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-095A&quot;,&quot;abcde&quot;,null,AesCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-096N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,AesManaged,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-097N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,AesManaged,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-098L&quot;,&quot;&quot;,&quot;test@123&quot;,AesManaged,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-099A&quot;,null,&quot;test@123&quot;,AesManaged,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-100N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-101N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-102L&quot;,&quot;&quot;,&quot;test@123&quot;,TripleDESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-103A&quot;,null,&quot;test@123&quot;,TripleDESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-104N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,DESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-105N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,DESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-106L&quot;,&quot;&quot;,&quot;test@123&quot;,DESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-107A&quot;,null,&quot;test@123&quot;,DESCryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-108N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-109N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-110L&quot;,&quot;&quot;,&quot;test@123&quot;,RC2CryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-111A&quot;,null,&quot;test@123&quot;,RC2CryptoServiceProvider,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-112N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,RijndaelManaged,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-113N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,RijndaelManaged,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-114L&quot;,&quot;&quot;,&quot;test@123&quot;,RijndaelManaged,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-115A&quot;,null,&quot;test@123&quot;,RijndaelManaged,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-116N&quot;,&quot;abcde&quot;,&quot;test@123&quot;,999,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-117N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,&quot;test@123&quot;,999,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-118L&quot;,&quot;&quot;,&quot;test@123&quot;,999,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.IO.SymmetricCryptographyTest.EncryptStringTest2(&quot;TestID-119A&quot;,null,&quot;test@123&quot;,999,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Str" executed="True" result="Failure" success="False" time="5.214" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CheckCharCodeTest" description="Tests for Check Char Code" executed="True" result="Success" success="True" time="0.056" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="ConstructorTest" executed="True" result="Success" success="True" time="0.023" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CheckCharCodeTest.ConstructorTest(&quot;TestID-001N&quot;,&quot;start&quot;,&quot;end&quot;,System.Text.ASCIIEncoding)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.ConstructorTest(&quot;TestID-002N&quot;,&quot;Compare&quot;,&quot;Compared&quot;,System.Text.UTF7Encoding)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.ConstructorTest(&quot;TestID-003A&quot;,&quot;&quot;,&quot;end&quot;,System.Text.ASCIIEncoding)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.ConstructorTest(&quot;TestID-004A&quot;,&quot;MoreThanEightCharacter&quot;,&quot;end&quot;,System.Text.ASCIIEncoding)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.ConstructorTest(&quot;TestID-005A&quot;,&quot;MoreThanEightCharacter&quot;,&quot;&quot;,System.Text.ASCIIEncoding)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.ConstructorTest(&quot;TestID-006A&quot;,&quot;Correct&quot;,&quot;MoreThanEightCharacter&quot;,System.Text.ASCIIEncoding)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.ConstructorTest(&quot;TestID-007A&quot;,null,&quot;MoreThanEightCharacter&quot;,System.Text.ASCIIEncoding)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.ConstructorTest(&quot;TestID-008A&quot;,&quot;Correct&quot;,null,System.Text.ASCIIEncoding)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsInRangeTest" executed="True" result="Success" success="True" time="0.026" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CheckCharCodeTest.IsInRangeTest(&quot;TestID-005A&quot;,&quot;&quot;)" description="Pass Zero length string" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.IsInRangeTest(&quot;TestID-007A&quot;,null)" description="Pass null value" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.IsInRangeTest(&quot;TestID-006A&quot;,&quot;Abcdefghi&quot;)" description="More than eight Characters" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.IsInRangeTest(&quot;TestID-001N&quot;,&quot;bbba&quot;)" description="Returns true" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.IsInRangeTest(&quot;TestID-002N&quot;,&quot;bbac&quot;)" description="Returns true" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.IsInRangeTest(&quot;TestID-003N&quot;,&quot;abcd&quot;)" description="Returns true" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CheckCharCodeTest.IsInRangeTest(&quot;TestID-004N&quot;,&quot;desc&quot;)" description="Returns false hence throwing Assestion exception" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CustomEncodeTest" executed="True" result="Success" success="True" time="0.610" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="ByteToStringTest" executed="True" result="Success" success="True" time="0.309" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-000N&quot;,System.Byte[],65001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-001N&quot;,System.Byte[],65000)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-002N&quot;,System.Byte[],1200)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-002N&quot;,System.Byte[],1201)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-003N&quot;,System.Byte[],10001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-004N&quot;,System.Byte[],10001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-005N&quot;,System.Byte[],10001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-006N&quot;,System.Byte[],20127)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-007N&quot;,System.Byte[],20127)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-008N&quot;,System.Byte[],20127)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-009N&quot;,System.Byte[],51932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-010N&quot;,System.Byte[],51932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-011N&quot;,System.Byte[],51932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-012N&quot;,System.Byte[],932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-013N&quot;,System.Byte[],932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-014N&quot;,System.Byte[],932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-015N&quot;,System.Byte[],50220)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-016N&quot;,System.Byte[],50220)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-017N&quot;,System.Byte[],50220)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-018N&quot;,System.Byte[],50221)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-019N&quot;,System.Byte[],50221)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-020N&quot;,System.Byte[],50221)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-021N&quot;,System.Byte[],50222)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-022N&quot;,System.Byte[],50222)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-023N&quot;,System.Byte[],50222)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-024N&quot;,System.Byte[],10001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-025N&quot;,System.Byte[],20127)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-026N&quot;,System.Byte[],51932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-027N&quot;,System.Byte[],932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-028N&quot;,System.Byte[],50220)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-029N&quot;,System.Byte[],50221)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-030N&quot;,System.Byte[],50222)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-031N&quot;,System.Byte[],65001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-032N&quot;,System.Byte[],65000)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-033N&quot;,System.Byte[],10001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-034N&quot;,System.Byte[],20127)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-035N&quot;,System.Byte[],51932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-036N&quot;,System.Byte[],932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-037N&quot;,System.Byte[],50220)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-038N&quot;,System.Byte[],50221)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-039N&quot;,System.Byte[],50222)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-040N&quot;,System.Byte[],65001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-041N&quot;,System.Byte[],65000)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-042N&quot;,System.Byte[],1200)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-043N&quot;,System.Byte[],1201)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-044N&quot;,System.Byte[],10001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-045N&quot;,System.Byte[],20127)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-046N&quot;,System.Byte[],51932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-047N&quot;,System.Byte[],932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-048N&quot;,System.Byte[],50220)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-049N&quot;,System.Byte[],50221)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-050N&quot;,System.Byte[],50222)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-051N&quot;,System.Byte[],65001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-052N&quot;,System.Byte[],65000)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-058N&quot;,System.Byte[],10001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-059N&quot;,System.Byte[],20127)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-060N&quot;,System.Byte[],51932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-061N&quot;,System.Byte[],932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-062N&quot;,System.Byte[],50220)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-063N&quot;,System.Byte[],50221)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-064N&quot;,System.Byte[],50222)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-065N&quot;,System.Byte[],65001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-066N&quot;,System.Byte[],null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-067N&quot;,System.Byte[],null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-068N&quot;,System.Byte[],null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-069N&quot;,System.Byte[],null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-070N&quot;,System.Byte[],null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-071N&quot;,System.Byte[],null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-072N&quot;,System.Byte[],null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-073A&quot;,System.Byte[],&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-074A&quot;,System.Byte[],&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-075A&quot;,System.Byte[],&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-076A&quot;,System.Byte[],&quot;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-077A&quot;,System.Byte[],&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-078A&quot;,System.Byte[],&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-079A&quot;,System.Byte[],&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-080A&quot;,&quot;&quot;,20127)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-081L&quot;,System.Byte[],20127)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-082A&quot;,&quot;&quot;,1201)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-083L&quot;,System.Byte[],1201)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-084A&quot;,&quot;&quot;,1200)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-085L&quot;,System.Byte[],1200)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-086A&quot;,&quot;&quot;,65000)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-087L&quot;,System.Byte[],65000)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-088A&quot;,&quot;&quot;,65001)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-089L&quot;,System.Byte[],65001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-090A&quot;,&quot;&quot;,50221)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-091L&quot;,System.Byte[],50221)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-092A&quot;,&quot;&quot;,50222)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-093L&quot;,System.Byte[],50222)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-094A&quot;,&quot;&quot;,932)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-095L&quot;,System.Byte[],932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-096A&quot;,&quot;&quot;,50220)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-097L&quot;,System.Byte[],50220)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-098A&quot;,&quot;&quot;,10001)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-099L&quot;,System.Byte[],10001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-100A&quot;,&quot;&quot;,51932)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-101L&quot;,System.Byte[],51932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ByteToStringTest(&quot;TestID-102A&quot;,&quot;&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="FormHexStringTest" executed="True" result="Success" success="True" time="0.031" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CustomEncodeTest.FormHexStringTest(&quot;TestID-000N&quot;,&quot;00 01 00 00 00 FF FF FF FF 01 00 00 00 00 00 00 00 06 01 00 00 00 0E 59 61 68 6F 6F 6F 6F 6F 6F 6F 6F 6F 6F 6F 0B&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.FormHexStringTest(&quot;TestID-001N&quot;,&quot;01&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.FormHexStringTest(&quot;TestID-002N&quot;,&quot;0A 0B 0C&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.FormHexStringTest(&quot;TestID-003A&quot;,1)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.FormHexStringTest(&quot;TestID-004A&quot;,&quot;abcde\x3042\x3044\x3046\x3048\x304A&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.FormHexStringTest(&quot;TestID-005A&quot;,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.FormHexStringTest(&quot;TestID-006A&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.FormHexStringTest(&quot;TestID-007N&quot;,&quot;AB 0C DE&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="FromBase64StringTest" executed="True" result="Success" success="True" time="0.013" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CustomEncodeTest.FromBase64StringTest(&quot;TestID-000N&quot;,&quot;AAECBAqQIEA=&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.FromBase64StringTest(&quot;TestID-001A&quot;,&quot;abcde=&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.FromBase64StringTest(&quot;TestID-002N&quot;,&quot;YYYYYWJjZGUT&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.FromBase64StringTest(&quot;TestID-003N&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.FromBase64StringTest(&quot;TestID-004A&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetEncodingsTest" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CustomEncodeTest.GetEncodingsTest(&quot;TestID-000N&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="HtmlDecodeTest" executed="True" result="Success" success="True" time="0.027" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlDecodeTest(&quot;TestID-000N&quot;,&quot;abcde&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlDecodeTest(&quot;TestID-001N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlDecodeTest(&quot;TestID-002N&quot;,&quot;1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlDecodeTest(&quot;TestID-003A&quot;,1)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlDecodeTest(&quot;TestID-004N&quot;,&quot;abcde\x3042\x3044\x3046\x3048\x304A&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlDecodeTest(&quot;TestID-005N&quot;,null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlDecodeTest(&quot;TestID-006L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlDecodeTest(&quot;TestID-007N&quot;,&quot;&lt;root&gt;abcde&lt;/root&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="HtmlEncodeTest" executed="True" result="Success" success="True" time="0.026" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlEncodeTest(&quot;TestID-000N&quot;,&quot;abcde&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlEncodeTest(&quot;TestID-001N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlEncodeTest(&quot;TestID-002N&quot;,&quot;1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlEncodeTest(&quot;TestID-003A&quot;,1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlEncodeTest(&quot;TestID-004N&quot;,&quot;abcde\x3042\x3044\x3046\x3048\x304A&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlEncodeTest(&quot;TestID-005N&quot;,null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlEncodeTest(&quot;TestID-006L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlEncodeTest(&quot;TestID-007N&quot;,&quot;This string contains the unicode character Pi (\x03A0)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.HtmlEncodeTest(&quot;TestID-008N&quot;,&quot;&amp;lt;root&amp;gt;abcde&amp;lt;/root&amp;gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="StringToByteTest" executed="True" result="Success" success="True" time="0.100" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-000N&quot;,&quot;abcde&quot;,1200)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-001N&quot;,&quot;abcde&quot;,1201)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-002N&quot;,&quot;abcde&quot;,65000)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-003N&quot;,&quot;abcde&quot;,65001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-004N&quot;,&quot;abcde&quot;,1200)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-005N&quot;,&quot;abcde&quot;,1201)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-006N&quot;,&quot;abcde&quot;,65000)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-007N&quot;,&quot;abcde&quot;,65001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-008N&quot;,&quot;abcde&quot;,null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-009L&quot;,&quot;&quot;,null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-010N&quot;,&quot;11&quot;,1200)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-011A&quot;,&quot;abcde&quot;,1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-012A&quot;,11,1200)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-013A&quot;,11,1)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-014A&quot;,null,1200)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-015A&quot;,null,1201)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-016A&quot;,null,65000)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-017A&quot;,null,65001)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-018L&quot;,&quot;&quot;,1200)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-019L&quot;,&quot;&quot;,1201)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-020L&quot;,&quot;&quot;,65000)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-021L&quot;,&quot;&quot;,65001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-022A&quot;,&quot;abcde&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-023A&quot;,&quot;11&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-024N&quot;,&quot;abcde&quot;,10001)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-025N&quot;,&quot;abcde&quot;,20127)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-026N&quot;,&quot;abcde&quot;,51932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-027N&quot;,&quot;abcde&quot;,932)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-028N&quot;,&quot;abcde&quot;,50220)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-029N&quot;,&quot;abcde&quot;,50221)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.StringToByteTest(&quot;TestID-030N&quot;,&quot;abcde&quot;,50222)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ToBase64StringTest" executed="True" result="Success" success="True" time="0.015" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CustomEncodeTest.ToBase64StringTest(&quot;TestID-000N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ToBase64StringTest(&quot;TestID-001N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ToBase64StringTest(&quot;TestID-002A&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ToBase64StringTest(&quot;TestID-003A&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ToBase64StringTest(&quot;TestID-004A&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ToHexStringTest" executed="True" result="Success" success="True" time="0.025" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CustomEncodeTest.ToHexStringTest(&quot;TestID-000N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ToHexStringTest(&quot;TestID-001N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ToHexStringTest(&quot;TestID-002N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ToHexStringTest(&quot;TestID-003A&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ToHexStringTest(&quot;TestID-004A&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ToHexStringTest(&quot;TestID-005N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.ToHexStringTest(&quot;TestID-006N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="UrlDecodeTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CustomEncodeTest.UrlDecodeTest(&quot;TestID-000N&quot;,&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.UrlDecodeTest(&quot;TestID-001N&quot;,&quot;google.com&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="UrlEncodeTest" executed="True" result="Success" success="True" time="0.006" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.CustomEncodeTest.UrlEncodeTest(&quot;TestID-000N&quot;,&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.CustomEncodeTest.UrlEncodeTest(&quot;TestID-001N&quot;,&quot;google.com&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FormatCheckerTest" executed="True" result="Success" success="True" time="3.073" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="IsJpCellularPhoneNumber_HyphenTest" executed="True" result="Success" success="True" time="0.181" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-000N&quot;,&quot;020-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-001N&quot;,&quot;929-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-002N&quot;,&quot;020-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-003N&quot;,&quot;0209-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-004N&quot;,&quot;0209-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-005N&quot;,&quot;020-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-006N&quot;,&quot;020-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-007N&quot;,&quot;02-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-008N&quot;,&quot;02-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-009N&quot;,&quot;020-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-010N&quot;,&quot;020-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-010N&quot;,&quot;060-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-011N&quot;,&quot;969-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-012N&quot;,&quot;060-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-013N&quot;,&quot;0609-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-014N&quot;,&quot;0609-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-015N&quot;,&quot;060-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-016N&quot;,&quot;060-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-017N&quot;,&quot;06-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-018N&quot;,&quot;06-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-019N&quot;,&quot;060-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-020N&quot;,&quot;060-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-021N&quot;,&quot;070-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-022N&quot;,&quot;979-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-023N&quot;,&quot;070-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-024N&quot;,&quot;0709-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-025N&quot;,&quot;0709-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-026N&quot;,&quot;070-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-027N&quot;,&quot;070-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-028N&quot;,&quot;07-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-029N&quot;,&quot;07-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-030N&quot;,&quot;070-999-9999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-031N&quot;,&quot;070-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-032N&quot;,&quot;080-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-033N&quot;,&quot;989-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-034N&quot;,&quot;080-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-035N&quot;,&quot;0809-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-036N&quot;,&quot;0809-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-037N&quot;,&quot;080-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-038N&quot;,&quot;080-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-039N&quot;,&quot;08-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-040N&quot;,&quot;08-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-041N&quot;,&quot;080-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-042N&quot;,&quot;080-9999-999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-043N&quot;,&quot;090-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-044N&quot;,&quot;999-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-045N&quot;,&quot;090-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-046N&quot;,&quot;0909-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-047N&quot;,&quot;0909-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-048N&quot;,&quot;090-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-049N&quot;,&quot;02099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-050N&quot;,&quot;92999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-051N&quot;,&quot;020aaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-052N&quot;,&quot;020999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-053N&quot;,&quot;0209999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-054N&quot;,&quot;06099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-055N&quot;,&quot;07099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-056N&quot;,&quot;08099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-057N&quot;,&quot;09099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-058L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_HyphenTest(&quot;TestID-059A&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpCellularPhoneNumber_NoHyphenTest" executed="True" result="Success" success="True" time="0.186" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-000N&quot;,&quot;020aaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-001N&quot;,&quot;92999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-002N&quot;,&quot;020-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-003N&quot;,&quot;020aaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-004N&quot;,&quot;0209-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-005N&quot;,&quot;020-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-006N&quot;,&quot;020-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-007N&quot;,&quot;02-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-008N&quot;,&quot;02-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-009N&quot;,&quot;020-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-010N&quot;,&quot;020-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-010N&quot;,&quot;060-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-011N&quot;,&quot;969-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-012N&quot;,&quot;060-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-013N&quot;,&quot;0609-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-014N&quot;,&quot;0609-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-015N&quot;,&quot;060-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-016N&quot;,&quot;060-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-017N&quot;,&quot;06-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-018N&quot;,&quot;06-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-019N&quot;,&quot;060-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-020N&quot;,&quot;060-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-021N&quot;,&quot;070-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-022N&quot;,&quot;979-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-023N&quot;,&quot;070-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-024N&quot;,&quot;0709-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-025N&quot;,&quot;0709-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-026N&quot;,&quot;070-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-027N&quot;,&quot;070-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-028N&quot;,&quot;07-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-029N&quot;,&quot;07-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-030N&quot;,&quot;070-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-031N&quot;,&quot;070-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-032N&quot;,&quot;080-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-033N&quot;,&quot;989-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-034N&quot;,&quot;080-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-035N&quot;,&quot;0809-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-036N&quot;,&quot;0809-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-037N&quot;,&quot;080-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-038N&quot;,&quot;080-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-039N&quot;,&quot;020999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-040N&quot;,&quot;0209999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-041N&quot;,&quot;06099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-042N&quot;,&quot;07099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-043N&quot;,&quot;08099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-044N&quot;,&quot;09099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-045N&quot;,&quot;0109999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-046N&quot;,&quot;03099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-047N&quot;,&quot;04099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-048N&quot;,&quot;05099999999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-049N&quot;,&quot;02099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-050N&quot;,&quot;92999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-051N&quot;,&quot;020aaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-052N&quot;,&quot;020999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-053N&quot;,&quot;0209999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-054N&quot;,&quot;06099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-055N&quot;,&quot;07099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-056N&quot;,&quot;08099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-057N&quot;,&quot;09099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-058L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumber_NoHyphenTest(&quot;TestID-059A&quot;,null)" executed="True" result="Success" success="True" time="0.005" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpCellularPhoneNumberTest" executed="True" result="Success" success="True" time="0.194" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-000N&quot;,&quot;020-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-001N&quot;,&quot;929-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-002N&quot;,&quot;020-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-003N&quot;,&quot;0209-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-004N&quot;,&quot;0209-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-005N&quot;,&quot;020-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-006N&quot;,&quot;020-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-007N&quot;,&quot;02-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-008N&quot;,&quot;02-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-009N&quot;,&quot;020-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-010N&quot;,&quot;020-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-010N&quot;,&quot;060-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-011N&quot;,&quot;969-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-012N&quot;,&quot;060-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-013N&quot;,&quot;0609-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-014N&quot;,&quot;0609-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-015N&quot;,&quot;060-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-016N&quot;,&quot;060-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-017N&quot;,&quot;06-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-018N&quot;,&quot;06-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-019N&quot;,&quot;060-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-020N&quot;,&quot;060-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-021N&quot;,&quot;070-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-022N&quot;,&quot;979-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-023N&quot;,&quot;070-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-024N&quot;,&quot;0709-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-025N&quot;,&quot;0709-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-026N&quot;,&quot;070-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-027N&quot;,&quot;070-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-028N&quot;,&quot;07-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-029N&quot;,&quot;07-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-030N&quot;,&quot;070-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-031N&quot;,&quot;070-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-032N&quot;,&quot;080-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-033N&quot;,&quot;989-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-034N&quot;,&quot;080-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-035N&quot;,&quot;0809-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-036N&quot;,&quot;0809-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-037N&quot;,&quot;080-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-038N&quot;,&quot;080-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-039N&quot;,&quot;08-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-040N&quot;,&quot;08-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-041N&quot;,&quot;080-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-042N&quot;,&quot;080-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-043N&quot;,&quot;090-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-044N&quot;,&quot;999-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-045N&quot;,&quot;090-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-046N&quot;,&quot;0909-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-047N&quot;,&quot;0909-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-048N&quot;,&quot;090-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-049N&quot;,&quot;02099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-050N&quot;,&quot;92999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-051N&quot;,&quot;020aaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-052N&quot;,&quot;020999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-053N&quot;,&quot;0209999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-054N&quot;,&quot;06099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-055N&quot;,&quot;07099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-056N&quot;,&quot;08099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-057N&quot;,&quot;09099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-058L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpCellularPhoneNumberTest(&quot;TestID-059A&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpFixedLinePhoneNumber_HyphenTest" executed="True" result="Success" success="True" time="0.147" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-000N&quot;,&quot;09999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-001N&quot;,&quot;99999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-002N&quot;,&quot;0aaaa-a-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-003N&quot;,&quot;099999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-004N&quot;,&quot;09999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-005N&quot;,&quot;09999-9-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-006N&quot;,&quot;0999--999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-007N&quot;,&quot;0999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-008N&quot;,&quot;09999--9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-009N&quot;,&quot;09999-9-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-010N&quot;,&quot;0999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-011N&quot;,&quot;9999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-012N&quot;,&quot;0aaa-aa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-013N&quot;,&quot;09999-999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-014N&quot;,&quot;09999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-015N&quot;,&quot;0999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-016N&quot;,&quot;0999-99-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-017N&quot;,&quot;099-9-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-018N&quot;,&quot;099-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-019N&quot;,&quot;0999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-020N&quot;,&quot;0999-99-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-021N&quot;,&quot;099-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-022N&quot;,&quot;999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-023N&quot;,&quot;0aa-aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-024N&quot;,&quot;0999-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-025N&quot;,&quot;0999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-026N&quot;,&quot;099-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-027N&quot;,&quot;099-999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-028N&quot;,&quot;09-99-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-029N&quot;,&quot;09-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-030N&quot;,&quot;099-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-031N&quot;,&quot;099-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-032N&quot;,&quot;09-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-033N&quot;,&quot;99-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-034N&quot;,&quot;0a-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-035N&quot;,&quot;099-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-036N&quot;,&quot;099-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-037N&quot;,&quot;09-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-038N&quot;,&quot;09-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-039N&quot;,&quot;0-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-040N&quot;,&quot;0-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-041N&quot;,&quot;09-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-042N&quot;,&quot;09-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-043N&quot;,&quot;999999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-044N&quot;,&quot;0999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-045N&quot;,&quot;9999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-046N&quot;,&quot;0aaaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-047N&quot;,&quot;09999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-048N&quot;,&quot;099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-049N&quot;,&quot;999999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-050L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_HyphenTest(&quot;TestID-051A&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpFixedLinePhoneNumber_NoHyphenTest" executed="True" result="Success" success="True" time="0.153" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-000N&quot;,&quot;09999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-001N&quot;,&quot;99999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-002N&quot;,&quot;0aaaa-a-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-003N&quot;,&quot;099999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-004N&quot;,&quot;09999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-005N&quot;,&quot;09999-9-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-006N&quot;,&quot;0999--999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-007N&quot;,&quot;0999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-008N&quot;,&quot;09999--9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-009N&quot;,&quot;09999-9-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-010N&quot;,&quot;0999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-011N&quot;,&quot;9999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-012N&quot;,&quot;0aaa-aa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-013N&quot;,&quot;09999-999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-014N&quot;,&quot;09999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-015N&quot;,&quot;0999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-016N&quot;,&quot;0999-99-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-017N&quot;,&quot;099-9-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-018N&quot;,&quot;099-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-019N&quot;,&quot;0999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-020N&quot;,&quot;0999-99-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-021N&quot;,&quot;099-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-022N&quot;,&quot;999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-023N&quot;,&quot;0aa-aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-024N&quot;,&quot;0999-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-025N&quot;,&quot;0999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-026N&quot;,&quot;099-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-027N&quot;,&quot;099-999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-028N&quot;,&quot;09-99-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-029N&quot;,&quot;09-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-030N&quot;,&quot;099-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-031N&quot;,&quot;099-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-032N&quot;,&quot;09-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-033N&quot;,&quot;99-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-034N&quot;,&quot;0a-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-035N&quot;,&quot;099-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-036N&quot;,&quot;099-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-037N&quot;,&quot;09-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-038N&quot;,&quot;09-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-039N&quot;,&quot;0-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-040N&quot;,&quot;0-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-041N&quot;,&quot;09-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-042N&quot;,&quot;09-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-043N&quot;,&quot;999999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-044N&quot;,&quot;0999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-045N&quot;,&quot;9999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-046N&quot;,&quot;0aaaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-047N&quot;,&quot;09999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-048N&quot;,&quot;099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-049N&quot;,&quot;999999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-050L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumber_NoHyphenTest(&quot;TestID-051A&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpFixedLinePhoneNumberTest" executed="True" result="Success" success="True" time="0.149" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-000N&quot;,&quot;09999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-001N&quot;,&quot;99999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-002N&quot;,&quot;0aaaa-a-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-003N&quot;,&quot;099999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-004N&quot;,&quot;09999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-005N&quot;,&quot;09999-9-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-006N&quot;,&quot;0999--999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-007N&quot;,&quot;0999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-008N&quot;,&quot;09999--9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-009N&quot;,&quot;09999-9-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-010N&quot;,&quot;0999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-011N&quot;,&quot;9999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-012N&quot;,&quot;0aaa-aa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-013N&quot;,&quot;09999-999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-014N&quot;,&quot;09999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-015N&quot;,&quot;0999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-016N&quot;,&quot;0999-99-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-017N&quot;,&quot;099-9-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-018N&quot;,&quot;099-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-019N&quot;,&quot;0999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-020N&quot;,&quot;0999-99-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-021N&quot;,&quot;099-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-022N&quot;,&quot;999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-023N&quot;,&quot;0aa-aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-024N&quot;,&quot;0999-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-025N&quot;,&quot;0999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-026N&quot;,&quot;099-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-027N&quot;,&quot;099-999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-028N&quot;,&quot;09-99-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-029N&quot;,&quot;09-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-030N&quot;,&quot;099-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-031N&quot;,&quot;099-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-032N&quot;,&quot;09-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-033N&quot;,&quot;99-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-034N&quot;,&quot;0a-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-035N&quot;,&quot;099-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-036N&quot;,&quot;099-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-037N&quot;,&quot;09-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-038N&quot;,&quot;09-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-039N&quot;,&quot;0-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-040N&quot;,&quot;0-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-041N&quot;,&quot;09-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-042N&quot;,&quot;09-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-043N&quot;,&quot;999999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-044N&quot;,&quot;0999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-045N&quot;,&quot;9999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-046N&quot;,&quot;0aaaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-047N&quot;,&quot;09999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-048N&quot;,&quot;099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-049L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpFixedLinePhoneNumberTest(&quot;TestID-050A&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpIpPhoneNumber_HyphenTest" executed="True" result="Success" success="True" time="0.134" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-000N&quot;,&quot;050-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-001N&quot;,&quot;959-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-002N&quot;,&quot;050-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-003N&quot;,&quot;0509-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-004N&quot;,&quot;0509-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-005N&quot;,&quot;050-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-006N&quot;,&quot;050-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-007N&quot;,&quot;05-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-008N&quot;,&quot;05-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-009N&quot;,&quot;050-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-010N&quot;,&quot;050-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-011N&quot;,&quot;9999999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-012N&quot;,&quot;010-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-013N&quot;,&quot;020-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-014N&quot;,&quot;030-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-015N&quot;,&quot;040-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-016N&quot;,&quot;060-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-017N&quot;,&quot;070-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-018N&quot;,&quot;080-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-019N&quot;,&quot;090-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-020N&quot;,&quot;95-999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-021N&quot;,&quot;95999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-022N&quot;,&quot;050aaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-023N&quot;,&quot;050999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-024N&quot;,&quot;0509999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-025N&quot;,&quot;01099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-026N&quot;,&quot;02099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-027N&quot;,&quot;03099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-028N&quot;,&quot;04099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-029N&quot;,&quot;06099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-030N&quot;,&quot;07099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-031N&quot;,&quot;08099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-032N&quot;,&quot;09099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-033L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_HyphenTest(&quot;TestID-034A&quot;,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpIpPhoneNumber_NoHyphenTest" executed="True" result="Success" success="True" time="0.148" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-000N&quot;,&quot;06-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-001N&quot;,&quot;959-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-002N&quot;,&quot;050-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-003N&quot;,&quot;0509-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-004N&quot;,&quot;0509-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-005N&quot;,&quot;050-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-006N&quot;,&quot;050-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-007N&quot;,&quot;05-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-008N&quot;,&quot;05-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-009N&quot;,&quot;050-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-010N&quot;,&quot;050-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-011N&quot;,&quot;9999999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-012N&quot;,&quot;010-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-013N&quot;,&quot;020-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-014N&quot;,&quot;030-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-015N&quot;,&quot;040-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-016N&quot;,&quot;060-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-017N&quot;,&quot;070-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-018N&quot;,&quot;080-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-019N&quot;,&quot;090-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-020N&quot;,&quot;05099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-021N&quot;,&quot;95999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-022N&quot;,&quot;050aaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-023N&quot;,&quot;050999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-024N&quot;,&quot;0509999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-025N&quot;,&quot;01099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-026N&quot;,&quot;02099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-027N&quot;,&quot;03099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-028N&quot;,&quot;04099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-029N&quot;,&quot;06099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-030N&quot;,&quot;07099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-031N&quot;,&quot;08099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-032N&quot;,&quot;09099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-033L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumber_NoHyphenTest(&quot;TestID-034A&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpIpPhoneNumberTest" executed="True" result="Success" success="True" time="0.107" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-000N&quot;,&quot;050-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-001N&quot;,&quot;959-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-002N&quot;,&quot;050-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-003N&quot;,&quot;0509-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-004N&quot;,&quot;0509-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-005N&quot;,&quot;050-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-006N&quot;,&quot;050-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-007N&quot;,&quot;05-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-008N&quot;,&quot;05-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-009N&quot;,&quot;050-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-010N&quot;,&quot;050-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-011N&quot;,&quot;9999999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-012N&quot;,&quot;010-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-013N&quot;,&quot;020-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-014N&quot;,&quot;030-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-015N&quot;,&quot;040-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-016N&quot;,&quot;060-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-017N&quot;,&quot;070-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-018N&quot;,&quot;080-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-019N&quot;,&quot;090-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-020N&quot;,&quot;05099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-021N&quot;,&quot;95999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-022N&quot;,&quot;050aaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-023N&quot;,&quot;050999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-024N&quot;,&quot;0509999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-025N&quot;,&quot;01099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-026N&quot;,&quot;02099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-027N&quot;,&quot;03099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-028N&quot;,&quot;04099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-029N&quot;,&quot;06099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-030N&quot;,&quot;07099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-031N&quot;,&quot;08099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-032N&quot;,&quot;09099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-033L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpIpPhoneNumberTest(&quot;TestID-034A&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpTelephoneNumber_HyphenTest" executed="True" result="Success" success="True" time="0.169" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-000N&quot;,&quot;09999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-001N&quot;,&quot;99999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-002N&quot;,&quot;0aaaa-a-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-003N&quot;,&quot;099999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-004N&quot;,&quot;09999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-005N&quot;,&quot;09999-9-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-006N&quot;,&quot;0999--999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-007N&quot;,&quot;0999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-008N&quot;,&quot;09999--9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-009N&quot;,&quot;09999-9-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-010N&quot;,&quot;0999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-011N&quot;,&quot;9999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-012N&quot;,&quot;0aaa-aa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-013N&quot;,&quot;09999-999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-014N&quot;,&quot;09999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-015N&quot;,&quot;0999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-016N&quot;,&quot;0999-99-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-017N&quot;,&quot;099-9-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-018N&quot;,&quot;099-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-019N&quot;,&quot;0999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-020N&quot;,&quot;0999-99-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-021N&quot;,&quot;099-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-022N&quot;,&quot;999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-023N&quot;,&quot;0aa-aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-024N&quot;,&quot;0999-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-025N&quot;,&quot;0999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-026N&quot;,&quot;099-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-027N&quot;,&quot;099-999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-028N&quot;,&quot;09-99-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-029N&quot;,&quot;09-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-030N&quot;,&quot;099-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-031N&quot;,&quot;099-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-032N&quot;,&quot;09-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-033N&quot;,&quot;99-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-034N&quot;,&quot;0a-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-035N&quot;,&quot;099-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-036N&quot;,&quot;099-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-037N&quot;,&quot;09-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-038N&quot;,&quot;09-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-039N&quot;,&quot;0-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-040N&quot;,&quot;0-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-041N&quot;,&quot;09-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-042N&quot;,&quot;09-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-043N&quot;,&quot;999999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-044N&quot;,&quot;0999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-045N&quot;,&quot;9999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-046N&quot;,&quot;0aaaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-047N&quot;,&quot;09999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-048N&quot;,&quot;099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-049N&quot;,&quot;020-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-050N&quot;,&quot;929-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-051N&quot;,&quot;020-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-052N&quot;,&quot;0209-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-053L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_HyphenTest(&quot;TestID-054A&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpTelephoneNumber_NoHyphenTest" executed="True" result="Success" success="True" time="0.178" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-000N&quot;,&quot;09999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-001N&quot;,&quot;99999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-002N&quot;,&quot;0aaaa-a-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-003N&quot;,&quot;099999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-004N&quot;,&quot;09999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-005N&quot;,&quot;09999-9-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-006N&quot;,&quot;0999--999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-007N&quot;,&quot;0999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-008N&quot;,&quot;09999--9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-009N&quot;,&quot;09999-9-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-010N&quot;,&quot;0999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-011N&quot;,&quot;9999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-012N&quot;,&quot;0aaa-aa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-013N&quot;,&quot;09999-999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-014N&quot;,&quot;09999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-015N&quot;,&quot;0999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-016N&quot;,&quot;0999-99-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-017N&quot;,&quot;099-9-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-018N&quot;,&quot;099-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-019N&quot;,&quot;0999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-020N&quot;,&quot;0999-99-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-021N&quot;,&quot;099-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-022N&quot;,&quot;999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-023N&quot;,&quot;0aa-aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-024N&quot;,&quot;0999-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-025N&quot;,&quot;0999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-026N&quot;,&quot;099-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-027N&quot;,&quot;099-999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-028N&quot;,&quot;09-99-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-029N&quot;,&quot;09-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-030N&quot;,&quot;099-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-031N&quot;,&quot;099-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-032N&quot;,&quot;09-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-033N&quot;,&quot;99-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-034N&quot;,&quot;0a-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-035N&quot;,&quot;099-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-036N&quot;,&quot;099-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-037N&quot;,&quot;09-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-038N&quot;,&quot;09-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-039N&quot;,&quot;0-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-040N&quot;,&quot;0-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-041N&quot;,&quot;09-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-042N&quot;,&quot;09-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-043N&quot;,&quot;999999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-044N&quot;,&quot;0999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-045N&quot;,&quot;9999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-046N&quot;,&quot;0aaaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-047N&quot;,&quot;09999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-048N&quot;,&quot;099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-049N&quot;,&quot;020-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-050N&quot;,&quot;929-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-051N&quot;,&quot;020-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-052N&quot;,&quot;0209-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-053L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumber_NoHyphenTest(&quot;TestID-054A&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpTelephoneNumberTest" executed="True" result="Success" success="True" time="0.217" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-000N&quot;,&quot;09999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-001N&quot;,&quot;99999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-002N&quot;,&quot;0aaaa-a-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-003N&quot;,&quot;099999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-004N&quot;,&quot;09999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-005N&quot;,&quot;09999-9-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-006N&quot;,&quot;0999--999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-007N&quot;,&quot;0999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-008N&quot;,&quot;09999--9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-009N&quot;,&quot;09999-9-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-010N&quot;,&quot;0999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-011N&quot;,&quot;9999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-012N&quot;,&quot;0aaa-aa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-013N&quot;,&quot;09999-999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-014N&quot;,&quot;09999-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-015N&quot;,&quot;0999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-016N&quot;,&quot;0999-99-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-017N&quot;,&quot;099-9-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-018N&quot;,&quot;099-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-019N&quot;,&quot;0999-9-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-020N&quot;,&quot;0999-99-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-021N&quot;,&quot;099-999-9999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-022N&quot;,&quot;999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-023N&quot;,&quot;0aa-aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-024N&quot;,&quot;0999-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-025N&quot;,&quot;0999-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-026N&quot;,&quot;099-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-027N&quot;,&quot;099-999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-028N&quot;,&quot;09-99-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-029N&quot;,&quot;09-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-030N&quot;,&quot;099-99-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-031N&quot;,&quot;099-999-999&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-032N&quot;,&quot;09-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-033N&quot;,&quot;99-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-034N&quot;,&quot;0a-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-035N&quot;,&quot;099-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-036N&quot;,&quot;099-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-037N&quot;,&quot;09-99999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-038N&quot;,&quot;09-9999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-039N&quot;,&quot;0-999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-040N&quot;,&quot;0-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-041N&quot;,&quot;09-999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-042N&quot;,&quot;09-9999-999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-043N&quot;,&quot;999999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-044N&quot;,&quot;0999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-045N&quot;,&quot;9999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-046N&quot;,&quot;0aaaaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-047N&quot;,&quot;09999999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-048N&quot;,&quot;099999999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-049N&quot;,&quot;020-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-050N&quot;,&quot;929-9999-9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-051N&quot;,&quot;020-aaaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-052N&quot;,&quot;0209-99999-99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-053L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpTelephoneNumberTest(&quot;TestID-054A&quot;,null)" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpZipCode_HyphenTest" executed="True" result="Success" success="True" time="0.094" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-000N&quot;,&quot;000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-001N&quot;,&quot;aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-002L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-003N&quot;,&quot;0000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-004N&quot;,&quot;000-00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-005N&quot;,&quot;00-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-006N&quot;,&quot;00-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-007N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-008N&quot;,&quot;000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-009N&quot;,&quot;aaa-aa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-010N&quot;,&quot;0000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-011N&quot;,&quot;0000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-012N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-013N&quot;,&quot;00-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-014N&quot;,&quot;00-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-015N&quot;,&quot;000-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-016N&quot;,&quot;0000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-017N&quot;,&quot;aaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-018N&quot;,&quot;00000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-019N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-020N&quot;,&quot;00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-021N&quot;,&quot;aaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-022N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-023N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-024N&quot;,&quot;000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-025N&quot;,&quot;aaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-026N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-027N&quot;,&quot;00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_HyphenTest(&quot;TestID-028A&quot;,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpZipCode_NoHyphenTest" executed="True" result="Success" success="True" time="0.109" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-000N&quot;,&quot;000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-001N&quot;,&quot;aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-002L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-003N&quot;,&quot;0000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-004N&quot;,&quot;000-00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-005N&quot;,&quot;00-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-006N&quot;,&quot;00-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-007N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-008N&quot;,&quot;000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-009N&quot;,&quot;aaa-aa&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-010N&quot;,&quot;0000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-011N&quot;,&quot;0000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-012N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-013N&quot;,&quot;00-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-014N&quot;,&quot;00-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-015N&quot;,&quot;000-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-016N&quot;,&quot;0000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-017N&quot;,&quot;aaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-018N&quot;,&quot;00000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-019N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-020N&quot;,&quot;00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-021N&quot;,&quot;aaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-022N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-023N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-024N&quot;,&quot;000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-025N&quot;,&quot;aaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-026N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-027N&quot;,&quot;00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode_NoHyphenTest(&quot;TestID-028A&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpZipCode5_HyphenTest" executed="True" result="Success" success="True" time="0.090" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-000N&quot;,&quot;000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-001N&quot;,&quot;aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-002L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-003N&quot;,&quot;0000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-004N&quot;,&quot;000-00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-005N&quot;,&quot;00-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-006N&quot;,&quot;00-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-007N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-008N&quot;,&quot;000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-009N&quot;,&quot;aaa-aa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-010N&quot;,&quot;0000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-011N&quot;,&quot;0000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-012N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-013N&quot;,&quot;00-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-014N&quot;,&quot;00-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-015N&quot;,&quot;000-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-016N&quot;,&quot;0000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-017N&quot;,&quot;aaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-018N&quot;,&quot;00000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-019N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-020N&quot;,&quot;00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-021N&quot;,&quot;aaaaa&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-022N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-023N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-024N&quot;,&quot;000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-025N&quot;,&quot;aaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-026N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-027N&quot;,&quot;00&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_HyphenTest(&quot;TestID-028A&quot;,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpZipCode5_NoHyphenTest" executed="True" result="Success" success="True" time="0.100" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-000N&quot;,&quot;000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-001N&quot;,&quot;aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-002L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-003N&quot;,&quot;0000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-004N&quot;,&quot;000-00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-005N&quot;,&quot;00-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-006N&quot;,&quot;00-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-007N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-008N&quot;,&quot;000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-009N&quot;,&quot;aaa-aa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-010N&quot;,&quot;0000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-011N&quot;,&quot;0000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-012N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-013N&quot;,&quot;00-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-014N&quot;,&quot;00-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-015N&quot;,&quot;000-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-016N&quot;,&quot;0000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-017N&quot;,&quot;aaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-018N&quot;,&quot;00000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-019N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-020N&quot;,&quot;00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-021N&quot;,&quot;aaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-022N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-023N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-024N&quot;,&quot;000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-025N&quot;,&quot;aaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-026N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-027N&quot;,&quot;00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5_NoHyphenTest(&quot;TestID-028A&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpZipCode5Test" executed="True" result="Success" success="True" time="0.107" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-000N&quot;,&quot;000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-001N&quot;,&quot;aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-002L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-003N&quot;,&quot;0000-0000&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-004N&quot;,&quot;000-00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-005N&quot;,&quot;00-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-006N&quot;,&quot;00-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-007N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-008N&quot;,&quot;000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-009N&quot;,&quot;aaa-aa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-010N&quot;,&quot;0000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-011N&quot;,&quot;0000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-012N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-013N&quot;,&quot;00-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-014N&quot;,&quot;00-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-015N&quot;,&quot;000-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-016N&quot;,&quot;0000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-017N&quot;,&quot;aaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-018N&quot;,&quot;00000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-019N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-020N&quot;,&quot;00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-021N&quot;,&quot;aaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-022N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-023N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-024N&quot;,&quot;000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-025N&quot;,&quot;aaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-026N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-027N&quot;,&quot;00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode5Test(&quot;TestID-028A&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpZipCode7_HyphenTest" executed="True" result="Success" success="True" time="0.125" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-000N&quot;,&quot;000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-001N&quot;,&quot;aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-002L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-003N&quot;,&quot;0000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-004N&quot;,&quot;000-00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-005N&quot;,&quot;00-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-006N&quot;,&quot;00-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-007N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-008N&quot;,&quot;000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-009N&quot;,&quot;aaa-aa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-010N&quot;,&quot;0000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-011N&quot;,&quot;0000-00&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-012N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-013N&quot;,&quot;00-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-014N&quot;,&quot;00-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-015N&quot;,&quot;000-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-016N&quot;,&quot;0000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-017N&quot;,&quot;aaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-018N&quot;,&quot;00000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-019N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-020N&quot;,&quot;00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-021N&quot;,&quot;aaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-022N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-023N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-024N&quot;,&quot;000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-025N&quot;,&quot;aaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-026N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-027N&quot;,&quot;00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_HyphenTest(&quot;TestID-028A&quot;,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpZipCode7_NoHyphenTest" executed="True" result="Success" success="True" time="0.105" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-000N&quot;,&quot;000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-001N&quot;,&quot;aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-002L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-003N&quot;,&quot;0000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-004N&quot;,&quot;000-00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-005N&quot;,&quot;00-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-006N&quot;,&quot;00-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-007N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-008N&quot;,&quot;000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-009N&quot;,&quot;aaa-aa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-010N&quot;,&quot;0000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-011N&quot;,&quot;0000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-012N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-013N&quot;,&quot;00-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-014N&quot;,&quot;00-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-015N&quot;,&quot;000-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-016N&quot;,&quot;0000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-017N&quot;,&quot;aaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-018N&quot;,&quot;00000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-019N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-020N&quot;,&quot;00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-021N&quot;,&quot;aaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-022N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-023N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-024N&quot;,&quot;000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-025N&quot;,&quot;aaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-026N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-027N&quot;,&quot;00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7_NoHyphenTest(&quot;TestID-028A&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpZipCode7Test" executed="True" result="Success" success="True" time="0.111" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-000N&quot;,&quot;000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-001N&quot;,&quot;aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-002L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-003N&quot;,&quot;0000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-004N&quot;,&quot;000-00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-005N&quot;,&quot;00-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-006N&quot;,&quot;00-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-007N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-008N&quot;,&quot;000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-009N&quot;,&quot;aaa-aa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-010N&quot;,&quot;0000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-011N&quot;,&quot;0000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-012N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-013N&quot;,&quot;00-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-014N&quot;,&quot;00-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-015N&quot;,&quot;000-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-016N&quot;,&quot;0000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-017N&quot;,&quot;aaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-018N&quot;,&quot;00000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-019N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-020N&quot;,&quot;00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-021N&quot;,&quot;aaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-022N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-023N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-024N&quot;,&quot;000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-025N&quot;,&quot;aaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-026N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-027N&quot;,&quot;00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCode7Test(&quot;TestID-028A&quot;,null)" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsJpZipCodeTest" executed="True" result="Success" success="True" time="0.098" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-000N&quot;,&quot;000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-001N&quot;,&quot;aaa-aaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-002L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-003N&quot;,&quot;0000-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-004N&quot;,&quot;000-00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-005N&quot;,&quot;00-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-006N&quot;,&quot;00-0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-007N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-008N&quot;,&quot;000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-009N&quot;,&quot;aaa-aa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-010N&quot;,&quot;0000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-011N&quot;,&quot;0000-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-012N&quot;,&quot;000-000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-013N&quot;,&quot;00-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-014N&quot;,&quot;00-00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-015N&quot;,&quot;000-0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-016N&quot;,&quot;0000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-017N&quot;,&quot;aaaaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-018N&quot;,&quot;00000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-019N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-020N&quot;,&quot;00000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-021N&quot;,&quot;aaaaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-022N&quot;,&quot;000000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-023N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-024N&quot;,&quot;000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-025N&quot;,&quot;aaa&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-026N&quot;,&quot;0000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-027N&quot;,&quot;00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatCheckerTest.IsJpZipCodeTest(&quot;TestID-028A&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FormatConverterTest" executed="True" result="Success" success="True" time="0.577" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="AddFigure3Test" executed="True" result="Success" success="True" time="0.031" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-000N&quot;,12,&quot;12&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-001N&quot;,12.888d,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-002N&quot;,5.61111d,&quot;5.61111&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-003N&quot;,10.135d,&quot;10.135&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-004N&quot;,10.99999d,&quot;10.99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-005L&quot;,&quot;&quot;,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-006N&quot;,12.88d,&quot;12.88&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-007N&quot;,12.888d,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-008N&quot;,12.8888d,&quot;12.8888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-009N&quot;,12.9999d,&quot;12.9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-010N&quot;,12.6111d,&quot;12.6111&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-011N&quot;,0.09d,&quot;0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure3Test(&quot;TestID-012A&quot;,null,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="AddFigure4Test" executed="True" result="Success" success="True" time="0.034" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-000N&quot;,12,&quot;12&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-001N&quot;,12.888d,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-002N&quot;,5.61111d,&quot;5.61111&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-003N&quot;,10.135d,&quot;10.135&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-004N&quot;,10.99999d,&quot;10.99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-005L&quot;,&quot;&quot;,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-006N&quot;,12.88d,&quot;12.88&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-007N&quot;,12.888d,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-008N&quot;,12.8888d,&quot;12.8888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-009N&quot;,12.9999d,&quot;12.9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-010N&quot;,12.6111d,&quot;12.6111&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-011N&quot;,0.09d,&quot;0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigure4Test(&quot;TestID-012A&quot;,null,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="AddFigureXTest" executed="True" result="Success" success="True" time="0.061" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-000N&quot;,-12.888m,3,&quot;-12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-001N&quot;,-12m,2,&quot;-12&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-002N&quot;,&quot;0.09&quot;,2,&quot;0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-003N&quot;,&quot;9&quot;,2,&quot;9&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-004N&quot;,&quot;-0.09&quot;,2,&quot;-0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-005N&quot;,&quot;abcd&quot;,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-006N&quot;,10,2,&quot;10&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-007N&quot;,-0.09m,2,&quot;-0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-008N&quot;,5.61111d,4,&quot;5.61111&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-009N&quot;,10.135d,2,&quot;10.135&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-0010N&quot;,10.99999d,5,&quot;10.99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-011N&quot;,12.88d,2,&quot;12.88&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-012N&quot;,12.888d,2,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-013N&quot;,12.8888d,3,&quot;12.8888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-014N&quot;,12.9999d,2,&quot;12.9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-015N&quot;,12.6111d,3,&quot;12.6111&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-016N&quot;,0.09d,2,&quot;0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-017N&quot;,0.09m,2,&quot;0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-018L&quot;,&quot;&quot;,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-019N&quot;,&quot;1.0&quot;,2,&quot;1.0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-020A&quot;,-12.888m,-3,&quot;-12.888&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddFigureXTest(&quot;TestID-021A&quot;,null,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="AddZerosAfterDecimalTest" executed="True" result="Success" success="True" time="0.052" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-000N&quot;,12m,2,&quot;12.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-001N&quot;,12.888m,2,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-002N&quot;,300.5m,2,&quot;300.50&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-003N&quot;,10.135m,2,&quot;10.135&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-004N&quot;,10.99999m,2,&quot;10.99999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-005N&quot;,12m,0,&quot;12&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-006A&quot;,&quot;&quot;,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-007N&quot;,12.888m,3,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-008N&quot;,12.8888m,3,&quot;12.8888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-009N&quot;,12.9999m,3,&quot;12.9999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-010N&quot;,12.6111m,3,&quot;12.6111&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-011N&quot;,null,2,&quot;0.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-012N&quot;,1m,2,&quot;1.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-013A&quot;,12,2,&quot;12.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-014N&quot;,12m,2,&quot;12.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-015N&quot;,0.09m,2,&quot;0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-016N&quot;,0.9m,3,&quot;0.900&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-018N&quot;,0m,3,&quot;0.000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-019N&quot;,12.6111m,0,&quot;12.6111&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-020N&quot;,12.6111m,7,&quot;12.6111000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.AddZerosAfterDecimalTest(&quot;TestID-021N&quot;,12.61m,0,&quot;12.61&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CeilingTest" executed="True" result="Success" success="True" time="0.052" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-000N&quot;,12,2,2,&quot;12.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-001N&quot;,12.888d,2,1,&quot;12.89&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-002N&quot;,5.61111d,2,2,&quot;5.62&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-003N&quot;,10.135d,2,2,&quot;10.14&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-004N&quot;,10.99999d,2,3,&quot;11.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-005L&quot;,&quot;&quot;,2,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-006N&quot;,12.88d,3,1,&quot;12.880&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-007N&quot;,12.888d,3,3,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-008N&quot;,12.8888d,3,4,&quot;12.889&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-009N&quot;,12.9999d,3,2,&quot;13.000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-010N&quot;,12.6111d,3,1,&quot;12.612&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-011A&quot;,null,2,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-012N&quot;,0.09m,2,2,&quot;0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-013N&quot;,20,2,2,&quot;20.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-014N&quot;,12,2,RI,&quot;12.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-015N&quot;,12,2,RP,&quot;12.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-016N&quot;,0.09m,2,RI,&quot;0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-017N&quot;,0.09m,2,RP,&quot;0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-018N&quot;,-0.09m,3,RI,&quot;-0.090&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-019N&quot;,12.6111d,0,RI,&quot;13&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-020N&quot;,12.6111d,7,RI,&quot;12.6111000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CeilingTest" executed="True" result="Success" success="True" time="0.040" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-000N&quot;,12,2,&quot;12.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-001N&quot;,12.888d,2,&quot;12.89&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-002N&quot;,5.61111d,2,&quot;5.62&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-003N&quot;,10.135d,2,&quot;10.14&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-004N&quot;,10.99999d,2,&quot;11.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-005L&quot;,&quot;&quot;,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-006N&quot;,12.88d,3,&quot;12.880&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-007N&quot;,12.888d,3,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-008N&quot;,12.8888d,3,&quot;12.889&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-009N&quot;,12.9999d,3,&quot;13.000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-010N&quot;,12.6111d,3,&quot;12.612&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-011A&quot;,null,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-012N&quot;,12.6111d,0,&quot;13&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.CeilingTest(&quot;TestID-013N&quot;,12.6111d,7,&quot;12.6111000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="FloorTest" executed="True" result="Success" success="True" time="0.052" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-000N&quot;,12,2,2,&quot;12.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-001N&quot;,12.888d,2,1,&quot;12.88&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-002N&quot;,5.61111d,2,2,&quot;5.61&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-003N&quot;,10.135d,2,2,&quot;10.13&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-004N&quot;,10.99999d,2,1,&quot;10.99&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-005L&quot;,&quot;&quot;,2,1,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-006N&quot;,12.88d,3,2,&quot;12.880&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-007N&quot;,12.888d,3,2,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-008N&quot;,12.8888d,3,3,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-009N&quot;,12.9999d,3,3,&quot;12.999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-010N&quot;,12.6111d,3,2,&quot;12.611&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-011A&quot;,null,2,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-012N&quot;,0.09m,2,2,&quot;0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-013N&quot;,20,2,2,&quot;20.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-014N&quot;,12,2,RZ,&quot;12.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-015N&quot;,12,2,RM,&quot;12.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-016N&quot;,0.09m,2,RM,&quot;0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-017N&quot;,0.09m,2,RZ,&quot;0.09&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-018N&quot;,-0.09m,3,RZ,&quot;-0.090&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-012N&quot;,12.6111d,0,RZ,&quot;12&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-013N&quot;,12.6111d,7,RZ,&quot;12.6111000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="FloorTest" executed="True" result="Success" success="True" time="0.035" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-000N&quot;,12,2,&quot;12.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-001N&quot;,12.888d,2,&quot;12.88&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-002N&quot;,5.61111d,2,&quot;5.61&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-003N&quot;,10.135d,2,&quot;10.13&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-004N&quot;,10.99999d,2,&quot;10.99&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-005L&quot;,&quot;&quot;,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-006N&quot;,12.88d,3,&quot;12.880&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-007N&quot;,12.888d,3,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-008N&quot;,12.8888d,3,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-009N&quot;,12.9999d,3,&quot;12.999&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-010N&quot;,12.6111d,3,&quot;12.611&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-011A&quot;,null,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-012N&quot;,12.6111d,0,&quot;12&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.FloorTest(&quot;TestID-013N&quot;,12.6111d,7,&quot;12.6111000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="Round_4sya5nyuTest" executed="True" result="Success" success="True" time="0.042" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-000N&quot;,12,2,&quot;12&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-001N&quot;,12.888d,2,&quot;12.89&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-002N&quot;,5.61111d,2,&quot;5.61&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-003N&quot;,10.135d,2,&quot;10.14&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-004N&quot;,10.99999d,2,&quot;11.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-005L&quot;,&quot;&quot;,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-006N&quot;,12.88d,3,&quot;12.88&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-007N&quot;,12.888d,3,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-008N&quot;,12.8888d,3,&quot;12.889&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-009N&quot;,12.9999d,3,&quot;13.000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-010N&quot;,12.6111d,3,&quot;12.611&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-011A&quot;,null,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-012N&quot;,12.6111d,0,&quot;13&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-013A&quot;,12.6111d,-1,&quot;12.611&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_4sya5nyuTest(&quot;TestID-014N&quot;,12.6111d,7,&quot;12.6111&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="Round_BankerTest" executed="True" result="Success" success="True" time="0.038" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-000N&quot;,12,2,&quot;12&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-001N&quot;,12.888d,2,&quot;12.89&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-002N&quot;,5.61111d,2,&quot;5.61&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-003N&quot;,10.135d,2,&quot;10.14&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-004N&quot;,10.99999d,2,&quot;11.00&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-005L&quot;,&quot;&quot;,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-006N&quot;,12.88d,3,&quot;12.88&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-007N&quot;,12.888d,3,&quot;12.888&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-008N&quot;,12.8888d,3,&quot;12.889&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-009N&quot;,12.9999d,3,&quot;13.000&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-010N&quot;,12.6111d,3,&quot;12.611&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-011A&quot;,null,2,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-012N&quot;,12.6111d,0,&quot;13&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-013A&quot;,12.6111d,-1,&quot;12.611&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.Round_BankerTest(&quot;TestID-014N&quot;,12.6111d,7,&quot;12.6111&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SeirekiToWarekiTest" executed="True" result="Success" success="True" time="0.029" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.SeirekiToWarekiTest(&quot;TestID-000N&quot;,04/24/1977 00:00:00,&quot;ggy\x5E74M\x6708d\x65E5\xFF08ddd&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SeirekiToWarekiTest(&quot;TestID-001N&quot;,04/24/1977 00:00:00,&quot;ggy\x5E74M\x6708d\x65E5\xFF08ddd\xFF09H:m:s&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SeirekiToWarekiTest(&quot;TestID-002N&quot;,04/24/1977 19:15:12,&quot;ggy\x5E74M\x6708d\x65E5\xFF08ddd\xFF09&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SeirekiToWarekiTest(&quot;TestID-003N&quot;,04/24/1977 19:15:12,&quot;ggy\x5E74M\x6708d\x65E5\xFF08ddd\xFF09H:m:s&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SeirekiToWarekiTest(&quot;TestID-004N&quot;,04/24/1977 19:15:12,&quot;ggy\x5E74M\x6708d\x65E5\xFF08ddd\xFF09tt h:m:s&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SeirekiToWarekiTest(&quot;TestID-005N&quot;,02/06/1992 01:01:01,&quot;ggyy\x5E74MM\x6708dd\x65E5 dddd HH:mm:ss&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SeirekiToWarekiTest(&quot;TestID-006N&quot;,02/06/1992 13:01:01,&quot;ggyy\x5E74MM\x6708dd\x65E5 dddd tt hh:mm:ss&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SeirekiToWarekiTest(&quot;TestID-012A&quot;,&quot;&quot;,&quot;ggyy\x5E74MM\x6708dd\x65E5 dddd tt hh:mm:ss&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SeirekiToWarekiTest(&quot;TestID-013A&quot;,null,&quot;ggy\x5E74M\x6708d\x65E5\xFF08ddd&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="SuppressTest" executed="True" result="Success" success="True" time="0.041" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-000N&quot;,&quot;&quot;,2,'@',&quot;@@&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-001N&quot;,&quot;123456789&quot;,0,'@',&quot;123456789&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-002N&quot;,&quot;123456789&quot;,1,'@',&quot;123456789&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-003N&quot;,&quot;123456789&quot;,5,'@',&quot;123456789&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-004N&quot;,&quot;123456789&quot;,9,'@',&quot;123456789&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-005N&quot;,&quot;123456789&quot;,10,'@',&quot;@123456789&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-006N&quot;,&quot;123456789&quot;,11,'@',&quot;@@123456789&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-007N&quot;,&quot;123456789&quot;,20,'@',&quot;@@@@@@@@@@@123456789&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-008N&quot;,&quot;&quot;,1,'0',&quot;0&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-009N&quot;,&quot;abcdefg&quot;,0,'0',&quot;abcdefg&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-010N&quot;,&quot;abcdefg&quot;,1,'0',&quot;abcdefg&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-011N&quot;,&quot;abcdefg&quot;,8,'0',&quot;0abcdefg&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-012L&quot;,&quot;&quot;,2,'1',&quot;11&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-013A&quot;,null,2,'1',&quot;11&quot;)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.SuppressTest(&quot;TestID-012A&quot;,&quot;1234&quot;,-2,'1',&quot;1234&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="WarekiToSeirekiTest" executed="True" result="Success" success="True" time="0.024" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.FormatConverterTest.WarekiToSeirekiTest(&quot;TestID-000N&quot;,&quot;\x662D\x548C52\x5E744\x670824\x65E5\xFF08\x65E5\xFF09&quot;,&quot;ggy\x5E74M\x6708d\x65E5\xFF08ddd\xFF09&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.WarekiToSeirekiTest(&quot;TestID-001N&quot;,&quot;\x662D\x548C52\x5E744\x670824\x65E5\xFF08\x65E5\xFF0919:15:12&quot;,&quot;ggy\x5E74M\x6708d\x65E5\xFF08ddd\xFF09H:m:s&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.WarekiToSeirekiTest(&quot;TestID-002N&quot;,&quot;\x662D\x548C52\x5E744\x670824\x65E5\xFF08\x65E5\xFF09\x5348\x5F8C 7:15:12&quot;,&quot;ggy\x5E74M\x6708d\x65E5\xFF08ddd\xFF09tt h:m:s&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.WarekiToSeirekiTest(&quot;TestID-003N&quot;,&quot;\x5E73\x621004\x5E7402\x670806\x65E5 \x6728\x66DC\x65E5 01:01:01&quot;,&quot;ggyy\x5E74MM\x6708dd\x65E5 dddd HH:mm:ss&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.WarekiToSeirekiTest(&quot;TestID-004N&quot;,&quot;\x5E73\x621004\x5E7402\x670806\x65E5 \x6728\x66DC\x65E5 \x5348\x5F8C 01:01:01&quot;,&quot;ggyy\x5E74MM\x6708dd\x65E5 dddd tt hh:mm:ss&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.FormatConverterTest.WarekiToSeirekiTest(&quot;TestID-05A&quot;,&quot;&quot;,&quot;ggyy\x5E74MM\x6708dd\x65E5 dddd tt hh:mm:ss&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.FormatConverterTest.WarekiToSeirekiTest(&quot;TestID-06A&quot;,null,&quot;ggy\x5E74M\x6708d\x65E5\xFF08ddd&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="StringCheckerTest" executed="True" result="Success" success="True" time="0.577" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="IsAlphabet_HankakuTest" executed="True" result="Success" success="True" time="0.021" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_HankakuTest(&quot;TestID-000N&quot;,&quot;abcde&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_HankakuTest(&quot;TestID-001N&quot;,&quot;12345&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_HankakuTest(&quot;TestID-002N&quot;,&quot;\xFF66\xFF80&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_HankakuTest(&quot;TestID-003L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_HankakuTest(&quot;TestID-005A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_HankakuTest(&quot;TestID-006N&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_HankakuTest(&quot;TestID-007A&quot;,1,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_HankakuTest(&quot;TestID-008N&quot;,&quot;0.1 0.2&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsAlphabet_ZenkakuTest" executed="True" result="Success" success="True" time="0.024" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_ZenkakuTest(&quot;TestID-000N&quot;,&quot;abcde&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_ZenkakuTest(&quot;TestID-001N&quot;,&quot;12345&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_ZenkakuTest(&quot;TestID-002N&quot;,&quot;\xFF66\xFF80&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_ZenkakuTest(&quot;TestID-003L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_ZenkakuTest(&quot;TestID-005A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_ZenkakuTest(&quot;TestID-006N&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_ZenkakuTest(&quot;TestID-007A&quot;,1,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_ZenkakuTest(&quot;TestID-008N&quot;,&quot;0.1 0.2&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabet_ZenkakuTest(&quot;TestID-009N&quot;,&quot;\xFF21&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsAlphabetTest" executed="True" result="Success" success="True" time="0.017" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabetTest(&quot;TestID-000L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabetTest(&quot;TestID-001A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabetTest(&quot;TestID-002A&quot;,&quot;abcde&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabetTest(&quot;TestID-003A&quot;,1,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabetTest(&quot;TestID-004N&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsAlphabetTest(&quot;TestID-005N&quot;,&quot;12345&quot;,False)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsHankakuTest" executed="True" result="Success" success="True" time="0.024" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHankakuTest(&quot;TestID-000N&quot;,&quot;abcde&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHankakuTest(&quot;TestID-001N&quot;,&quot;12345&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHankakuTest(&quot;TestID-002N&quot;,&quot;\xFF66\xFF80&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHankakuTest(&quot;TestID-003L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHankakuTest(&quot;TestID-005A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHankakuTest(&quot;TestID-006N&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHankakuTest(&quot;TestID-007A&quot;,1,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHankakuTest(&quot;TestID-008A&quot;,&quot;0.1 0.2&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsHiraganaTest" executed="True" result="Success" success="True" time="0.023" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHiraganaTest(&quot;TestID-000N&quot;,&quot;abcde&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHiraganaTest(&quot;TestID-001N&quot;,&quot;12345&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHiraganaTest(&quot;TestID-002N&quot;,&quot;\xFF66\xFF80&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHiraganaTest(&quot;TestID-003L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHiraganaTest(&quot;TestID-005A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHiraganaTest(&quot;TestID-006N&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHiraganaTest(&quot;TestID-007A&quot;,1,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHiraganaTest(&quot;TestID-008N&quot;,&quot;0.1 0.2&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsHiraganaTest(&quot;TestID-009N&quot;,&quot;\x3055\x3093&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsInCodePageTest" executed="True" result="Success" success="True" time="0.023" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsInCodePageTest(&quot;TestID-000N&quot;,&quot;&quot;,1200,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsInCodePageTest(&quot;TestID-001N&quot;,&quot;abcde&quot;,1200,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsInCodePageTest(&quot;TestID-002N&quot;,&quot;abcde&quot;,65001,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsInCodePageTest(&quot;TestID-003A&quot;,null,65001,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsInCodePageTest(&quot;TestID-004A&quot;,&quot;abcd&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsInCodePageTest(&quot;TestID-005A&quot;,&quot;abcd&quot;,50221,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsInCodePageTest(&quot;TestID-006N&quot;,&quot;abcd&quot;,null,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsInCodePageTest(&quot;TestID-007N&quot;,&quot;\\\\@!&quot;,20108,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsInCodePageTest(&quot;TestID-008N&quot;,&quot;\\\\*&amp;&quot;,20108,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsIsShift_Jis_ZenkakuTest" executed="True" result="Success" success="True" time="0.014" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsIsShift_Jis_ZenkakuTest(&quot;TestID-000N&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsIsShift_Jis_ZenkakuTest(&quot;TestID-001A&quot;,&quot;\x30CA\x30EB\x30C8&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsIsShift_Jis_ZenkakuTest(&quot;TestID-002N&quot;,&quot;abcde&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsIsShift_Jis_ZenkakuTest(&quot;TestID-003A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsIsShift_Jis_ZenkakuTest(&quot;TestID-004A&quot;,&quot;\x0192`\x0192\x0192\x0192l\x0192\x2039\x0192p[\x0192g\x0192i[\x201A\x00CC\x2018I\x2018\x00F0&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsKanjiTest" executed="True" result="Success" success="True" time="0.023" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKanjiTest(&quot;TestID-000N&quot;,&quot;\x9054\x78E8&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKanjiTest(&quot;TestID-001N&quot;,&quot;12345&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKanjiTest(&quot;TestID-002N&quot;,&quot;\xFF66\xFF80&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKanjiTest(&quot;TestID-003L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKanjiTest(&quot;TestID-005A&quot;,null,True)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKanjiTest(&quot;TestID-006N&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKanjiTest(&quot;TestID-007A&quot;,1,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKanjiTest(&quot;TestID-008N&quot;,&quot;0.1 0.2&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKanjiTest(&quot;TestID-009N&quot;,&quot;\x30CA\x30EB\x30C8&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsKatakana_HankakuTest" executed="True" result="Success" success="True" time="0.023" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_HankakuTest(&quot;TestID-000N&quot;,&quot;abcde&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_HankakuTest(&quot;TestID-001N&quot;,&quot;12345&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_HankakuTest(&quot;TestID-002N&quot;,&quot;\xFF66\xFF80&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_HankakuTest(&quot;TestID-003L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_HankakuTest(&quot;TestID-005A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_HankakuTest(&quot;TestID-006N&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_HankakuTest(&quot;TestID-007A&quot;,1,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_HankakuTest(&quot;TestID-008N&quot;,&quot;0.1 0.2&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_HankakuTest(&quot;TestID-009N&quot;,&quot;\x30CA\x30EB\x30C8&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsKatakana_ZenkakuTest" executed="True" result="Success" success="True" time="0.023" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_ZenkakuTest(&quot;TestID-000N&quot;,&quot;abcde&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_ZenkakuTest(&quot;TestID-001N&quot;,&quot;12345&quot;,False)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_ZenkakuTest(&quot;TestID-002N&quot;,&quot;\xFF66\xFF80&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_ZenkakuTest(&quot;TestID-003L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_ZenkakuTest(&quot;TestID-005A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_ZenkakuTest(&quot;TestID-006N&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_ZenkakuTest(&quot;TestID-007A&quot;,1,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_ZenkakuTest(&quot;TestID-008N&quot;,&quot;0.1 0.2&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakana_ZenkakuTest(&quot;TestID-009N&quot;,&quot;\x30CA\x30EB\x30C8&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsKatakanaTest" executed="True" result="Success" success="True" time="0.046" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakanaTest(&quot;TestID-000N&quot;,&quot;abcde&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakanaTest(&quot;TestID-001N&quot;,&quot;12345&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakanaTest(&quot;TestID-002N&quot;,&quot;\xFF66\xFF80&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakanaTest(&quot;TestID-003L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakanaTest(&quot;TestID-005A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakanaTest(&quot;TestID-006N&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakanaTest(&quot;TestID-007A&quot;,1,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakanaTest(&quot;TestID-008N&quot;,&quot;0.1 0.2&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsKatakanaTest(&quot;TestID-009N&quot;,&quot;\x30CA\x30EB\x30C8&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsNumbers_HankakuTest" executed="True" result="Success" success="True" time="0.020" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_HankakuTest(&quot;TestID-000N&quot;,&quot;abcde&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_HankakuTest(&quot;TestID-001N&quot;,&quot;12345&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_HankakuTest(&quot;TestID-002N&quot;,&quot;\xFF66\xFF80&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_HankakuTest(&quot;TestID-003L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_HankakuTest(&quot;TestID-005A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_HankakuTest(&quot;TestID-006N&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_HankakuTest(&quot;TestID-007A&quot;,1,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_HankakuTest(&quot;TestID-008A&quot;,&quot;0.1 0.2&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsNumbers_ZenkakuTest" executed="True" result="Success" success="True" time="0.028" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_ZenkakuTest(&quot;TestID-000N&quot;,&quot;\xFF11\xFF12\xFF13\xFF14\xFF15&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_ZenkakuTest(&quot;TestID-001L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_ZenkakuTest(&quot;TestID-002A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_ZenkakuTest(&quot;TestID-003A&quot;,&quot;abcde&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_ZenkakuTest(&quot;TestID-004N&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_ZenkakuTest(&quot;TestID-005A&quot;,&quot;\x8CB4\x793E\x307E\x3059\x307E\x3059\x3054\x76DB\x6804\x306E\x3053\x3068\x3068\x304A\x6176\x3073\x7533\x3057\x4E0A\x3052\x307E\x3059\x3002\x5E73\x7D20\x306F\x683C\x5225\x306E\x3054\x9AD8\x914D\x3092\x8CDC\x308A\x3001\x539A\x304F\x5FA1\x793C\x7533\x3057\x4E0A\x3052\x307E\x3059\x3002&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_ZenkakuTest(&quot;TestID-006A&quot;,&quot;\x8CB4\x793E\x307E\x3059\x307E\x3059\x3054\x76DB\x6804\x306E\x3053\x3068\x3068\x304A\x6176\x3073\x7533\x3057\x4E0A\x3052\x307E\x3059\x3002\x5E73\x7D20\x306F\x683C\x5225\x306E\x304A\x5F15\x304D\x7ACB\x3066\x3092\x3044\x305F\x3060\x304D\x3001\x539A\x304F\x5FA1\x793C\x7533\x3057\x4E0A\x3052\x307E\x3059\x3002&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbers_ZenkakuTest(&quot;TestID-007A&quot;,1,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsNumbersTest" executed="True" result="Success" success="True" time="0.025" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbersTest(&quot;TestID-000N&quot;,&quot;12345&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbersTest(&quot;TestID-001A&quot;,&quot;abcde&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbersTest(&quot;TestID-002N&quot;,&quot;\xFF66\xFF80&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbersTest(&quot;TestID-003L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbersTest(&quot;TestID-005A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbersTest(&quot;TestID-006A&quot;,&quot;\xFF6A\xFF6B\xFF6C\xFF6D\xFF6E&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbersTest(&quot;TestID-007A&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumbersTest(&quot;TestID-008N&quot;,1,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsNumericTest" executed="True" result="Success" success="True" time="0.028" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumericTest(&quot;TestID-000N&quot;,&quot;12345&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumericTest(&quot;TestID-001A&quot;,&quot;abcde&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumericTest(&quot;TestID-002A&quot;,&quot;\xFF66\xFF80&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumericTest(&quot;TestID-003A&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumericTest(&quot;TestID-004A&quot;,null,True)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumericTest(&quot;TestID-005A&quot;,&quot;\xFF6A\xFF6B\xFF6C\xFF6D\xFF6E&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumericTest(&quot;TestID-006N&quot;,&quot;12.78&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumericTest(&quot;TestID-007A&quot;,12.78d,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsNumericTest(&quot;TestID-008N&quot;,&quot;\xFF11\xFF12\xFF13\xFF14\xFF15&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsShift_Jis_HankakuTest" executed="True" result="Success" success="True" time="0.013" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsShift_Jis_HankakuTest(&quot;TestID-000N&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsShift_Jis_HankakuTest(&quot;TestID-001A&quot;,&quot;\x30CA\x30EB\x30C8&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsShift_Jis_HankakuTest(&quot;TestID-002N&quot;,&quot;abcde&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsShift_Jis_HankakuTest(&quot;TestID-003A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsShift_Jis_HankakuTest(&quot;TestID-004A&quot;,&quot;\x0192`\x0192\x0192\x0192l\x0192\x2039\x0192p[\x0192g\x0192i[\x201A\x00CC\x2018I\x2018\x00F0&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsShiftJisTest" executed="True" result="Success" success="True" time="0.011" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsShiftJisTest(&quot;TestID-000N&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsShiftJisTest(&quot;TestID-001N&quot;,&quot;abcde&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsShiftJisTest(&quot;TestID-002A&quot;,null,True)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsShiftJisTest(&quot;TestID-003A&quot;,&quot;\x0192`\x0192\x0192\x0192l\x0192\x2039\x0192p[\x0192g\x0192i[\x201A\x00CC\x2018I\x2018\x00F0&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsShiftJisTest(&quot;TestID-004A&quot;,&quot;#&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="IsZenkakuTest" executed="True" result="Success" success="True" time="0.025" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.IsZenkakuTest(&quot;TestID-000N&quot;,&quot;\x8CB4\x793E\x307E\x3059\x307E\x3059\x3054\x76DB\x6804\x306E\x3053\x3068\x3068\x304A\x6176\x3073\x7533\x3057\x4E0A\x3052\x307E\x3059\x3002\x5E73\x7D20\x306F\x683C\x5225\x306E\x3054\x9AD8\x914D\x3092\x8CDC\x308A\x3001\x539A\x304F\x5FA1\x793C\x7533\x3057\x4E0A\x3052\x307E\x3059\x3002&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsZenkakuTest(&quot;TestID-001N&quot;,&quot;\x8CB4\x793E\x307E\x3059\x307E\x3059\x3054\x76DB\x6804\x306E\x3053\x3068\x3068\x304A\x6176\x3073\x7533\x3057\x4E0A\x3052\x307E\x3059\x3002\x5E73\x7D20\x306F\x683C\x5225\x306E\x304A\x5F15\x304D\x7ACB\x3066\x3092\x3044\x305F\x3060\x304D\x3001\x539A\x304F\x5FA1\x793C\x7533\x3057\x4E0A\x3052\x307E\x3059\x3002&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsZenkakuTest(&quot;TestID-002N&quot;,&quot;\xFF11\xFF12\xFF13\xFF14\xFF15&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsZenkakuTest(&quot;TestID-003L&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsZenkakuTest(&quot;TestID-004A&quot;,null,True)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsZenkakuTest(&quot;TestID-005A&quot;,&quot;abcde&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsZenkakuTest(&quot;TestID-006N&quot;,&quot;\x4E00\x4E8C\x4E09\x56DB\x4E94\x516D\x4E03\x516B\x4E5D\x5341&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsZenkakuTest(&quot;TestID-007A&quot;,1,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.IsZenkakuTest(&quot;TestID-008A&quot;,&quot;0.1 0.2&quot;,True)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="MatchesTest" executed="True" result="Success" success="True" time="0.014" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-000N&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-001N&quot;,&quot;The the quick brown fox  fox jumped over the lazy dog dog.&quot;,&quot;\\b(?&lt;word&gt;\\w+)\\s+(\\k&lt;word&gt;)\\b&quot;,2)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-002N&quot;,&quot;&quot;,&quot;d \\w+ \\s&quot;,0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-003N&quot;,null,&quot;d \\w+ \\s&quot;,0)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-004N&quot;,&quot;hi&quot;,&quot;&quot;,3)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="MatchesTest" executed="True" result="Success" success="True" time="0.025" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-000N&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,Singleline,0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-001N&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,RightToLeft,0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-002N&quot;,&quot;The the quick brown fox  fox jumped over the lazy dog dog.&quot;,&quot;\\b(?&lt;word&gt;\\w+)\\s+(\\k&lt;word&gt;)\\b&quot;,Compiled,2)" executed="True" result="Success" success="True" time="0.003" asserts="2" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-003N&quot;,&quot;Hello World&quot;,&quot;&quot;,Singleline,12)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-004A&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,&quot;&quot;,2)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-005N&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,null,0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-006N&quot;,&quot;Hello World&quot;,&quot;&quot;,null,12)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchesTest(&quot;TestID-007N&quot;,&quot;&quot;,&quot;d \\w+ \\s&quot;,Singleline,0)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="MatchTest" executed="True" result="Success" success="True" time="0.021" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-000N&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,Singleline,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-001N&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,RightToLeft,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-002N&quot;,&quot;The the quick brown fox  fox jumped over the lazy dog dog.&quot;,&quot;\\b(?&lt;word&gt;\\w+)\\s+(\\k&lt;word&gt;)\\b&quot;,Compiled,True)" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-003N&quot;,&quot;Hello World&quot;,&quot;&quot;,Singleline,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-004A&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-005N&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,null,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-006N&quot;,&quot;Hello World&quot;,&quot;&quot;,null,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-007N&quot;,&quot;&quot;,&quot;d \\w+ \\s&quot;,Singleline,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="MatchTest" executed="True" result="Success" success="True" time="0.030" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-000N&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-001N&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-002N&quot;,&quot;The the quick brown fox  fox jumped over the lazy dog dog.&quot;,&quot;\\b(?&lt;word&gt;\\w+)\\s+(\\k&lt;word&gt;)\\b&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-003N&quot;,&quot;Hello World&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-004N&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-005N&quot;,&quot;Hello World&quot;,&quot;d \\w+ \\s&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-006N&quot;,&quot;Hello World&quot;,&quot;&quot;,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-007N&quot;,&quot;&quot;,&quot;d \\w+ \\s&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-008A&quot;,&quot;&quot;,null,False)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringCheckerTest.MatchTest(&quot;TestID-009A&quot;,null,&quot;d \\w+ \\s&quot;,False)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="StringConverterTest" executed="True" result="Failure" success="False" time="0.169" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="EditYYYYMMDDStringTest" executed="True" result="Failure" success="False" time="0.100" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-000N&quot;,&quot;1234567&quot;,True)" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: False
  But was:  True
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(String testCaseID, String& text, Boolean result) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Str\StringConverterTest.cs:行 230
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-001N&quot;,&quot;123456&quot;,True)" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: False
  But was:  True
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(String testCaseID, String& text, Boolean result) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Str\StringConverterTest.cs:行 230
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-002N&quot;,&quot;2345128&quot;,True)" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: False
  But was:  True
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(String testCaseID, String& text, Boolean result) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Str\StringConverterTest.cs:行 230
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-003N&quot;,&quot;abcdef&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-004N&quot;,&quot;12345678&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-005N&quot;,&quot;&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-006A&quot;,null,False)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-007N&quot;,&quot;12345&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-008N&quot;,&quot;1234137&quot;,True)" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: False
  But was:  True
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(String testCaseID, String& text, Boolean result) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Str\StringConverterTest.cs:行 230
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-009N&quot;,&quot;1234127&quot;,True)" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: False
  But was:  True
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(String testCaseID, String& text, Boolean result) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Str\StringConverterTest.cs:行 230
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-010N&quot;,&quot;0&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-011N&quot;,&quot;\xFF11\xFF12\xFF13\xFF14\xFF15&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-012N&quot;,&quot;01010101&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-013N&quot;,&quot;000000&quot;,True)" executed="True" result="Failure" success="False" time="0.001" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: False
  But was:  True
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(String testCaseID, String& text, Boolean result) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Str\StringConverterTest.cs:行 230
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Str.StringConverterTest.EditYYYYMMDDStringTest(&quot;TestID-014N&quot;,&quot;-1234567&quot;,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ToHankakuTest" executed="True" result="Success" success="True" time="0.012" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringConverterTest.ToHankakuTest(&quot;TestID-000N&quot;,&quot;\x9054\x78E8\x3055\x3093&quot;,&quot;\x9054\x78E8\x3055\x3093&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToHankakuTest(&quot;TestID-001N&quot;,&quot;eigodesu&quot;,&quot;eigodesu&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToHankakuTest(&quot;TestID-002L&quot;,&quot;&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToHankakuTest(&quot;TestID-003N&quot;,null,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToHankakuTest(&quot;TestID-004N&quot;,&quot;\x30CA\x30EB\x30C8&quot;,&quot;\xFF85\xFF99\xFF84&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ToHiraganaTest" executed="True" result="Success" success="True" time="0.015" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringConverterTest.ToHiraganaTest(&quot;TestID-000N&quot;,&quot;\x9054\x78E8\x3055\x3093&quot;,&quot;\x9054\x78E8\x3055\x3093&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToHiraganaTest(&quot;TestID-001N&quot;,&quot;eigodesu&quot;,&quot;eigodesu&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToHiraganaTest(&quot;TestID-002L&quot;,&quot;&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToHiraganaTest(&quot;TestID-003N&quot;,null,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToHiraganaTest(&quot;TestID-004N&quot;,&quot;\x30CA\x30EB\x30C8&quot;,&quot;\x306A\x308B\x3068&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToHiraganaTest(&quot;TestID-005N&quot;,&quot;\xFF80\xFF8A\xFF9E\xFF7A&quot;,&quot;\xFF80\xFF8A\xFF9E\xFF7A&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ToKatakanaTest" executed="True" result="Success" success="True" time="0.015" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringConverterTest.ToKatakanaTest(&quot;TestID-000N&quot;,&quot;\x9054\x78E8\x3055\x3093&quot;,&quot;\x9054\x78E8\x30B5\x30F3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToKatakanaTest(&quot;TestID-001N&quot;,&quot;eigodesu&quot;,&quot;eigodesu&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToKatakanaTest(&quot;TestID-002L&quot;,&quot;&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToKatakanaTest(&quot;TestID-003N&quot;,null,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToKatakanaTest(&quot;TestID-004N&quot;,&quot;\x30CA\x30EB\x30C8&quot;,&quot;\x30CA\x30EB\x30C8&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToKatakanaTest(&quot;TestID-005N&quot;,&quot;\xFF80\xFF8A\xFF9E\xFF7A&quot;,&quot;\xFF80\xFF8A\xFF9E\xFF7A&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ToZenkakuTest" executed="True" result="Success" success="True" time="0.013" asserts="0">
                            <results>
                              <test-case name="Public.Test.Str.StringConverterTest.ToZenkakuTest(&quot;TestID-000N&quot;,&quot;\x9054\x78E8\x3055\x3093&quot;,&quot;\x9054\x78E8\x3055\x3093&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToZenkakuTest(&quot;TestID-001N&quot;,&quot;eigodesu&quot;,&quot;\xFF45\xFF49\xFF47\xFF4F\xFF44\xFF45\xFF53\xFF55&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToZenkakuTest(&quot;TestID-002L&quot;,&quot;&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToZenkakuTest(&quot;TestID-003N&quot;,null,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToZenkakuTest(&quot;TestID-004N&quot;,&quot;\x30CA\x30EB\x30C8&quot;,&quot;\x30CA\x30EB\x30C8&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Str.StringConverterTest.ToZenkakuTest(&quot;TestID-005N&quot;,&quot;\xFF80\xFF8A\xFF9E\xFF7A&quot;,&quot;\x30BF\x30D0\x30B3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Util" executed="True" result="Failure" success="False" time="4.318" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="GetHashTest" executed="True" result="Success" success="True" time="0.397" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="EncryptStringTest" executed="True" result="Success" success="True" time="0.105" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-022N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,SHA384Managed)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-015L&quot;,&quot;&quot;,SHA1Managed)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-016A&quot;,null,SHA1Managed)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-017N&quot;,&quot;abcde&quot;,SHA256Managed)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-018N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,SHA256Managed)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-019L&quot;,&quot;&quot;,SHA256Managed)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-020A&quot;,null,SHA256Managed)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-014N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,SHA1Managed)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-001N&quot;,&quot;abcde&quot;,Default)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-023L&quot;,&quot;&quot;,SHA384Managed)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-024A&quot;,null,SHA384Managed)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-025N&quot;,&quot;abcde&quot;,SHA512Managed)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-026N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,SHA512Managed)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-027L&quot;,&quot;&quot;,SHA512Managed)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-028A&quot;,null,SHA512Managed)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-029A&quot;,&quot;abcde&quot;,999)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-030A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,999)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-031A&quot;,&quot;&quot;,999)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-032A&quot;,null,999)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-002N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,Default)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-021N&quot;,&quot;abcde&quot;,SHA384Managed)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-003L&quot;,&quot;&quot;,Default)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-004A&quot;,null,Default)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-005N&quot;,&quot;abcde&quot;,MD5CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-006N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,MD5CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-007L&quot;,&quot;&quot;,MD5CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-008A&quot;,null,MD5CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-009N&quot;,&quot;abcde&quot;,SHA1CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-010N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,SHA1CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-011L&quot;,&quot;&quot;,SHA1CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-012A&quot;,null,SHA1CryptoServiceProvider)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.EncryptStringTest(&quot;TestID-013N&quot;,&quot;abcde&quot;,SHA1Managed)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetSaltedPasswdTest" executed="True" result="Success" success="True" time="0.285" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-025N&quot;,&quot;&quot;,Default,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-017A&quot;,&quot;test@123&quot;,SHA384Managed,0)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-018A&quot;,&quot;test@123&quot;,SHA384Managed,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-019N&quot;,&quot;test@123&quot;,SHA512Managed,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-020A&quot;,&quot;test@123&quot;,SHA512Managed,0)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-021A&quot;,&quot;test@123&quot;,SHA512Managed,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-022A&quot;,&quot;test@123&quot;,999,10)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-023A&quot;,&quot;test@123&quot;,999,0)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-024A&quot;,&quot;test@123&quot;,999,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-001N&quot;,&quot;test@123&quot;,Default,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-026A&quot;,&quot;&quot;,Default,0)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-027A&quot;,&quot;&quot;,Default,-1)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-028N&quot;,&quot;&quot;,MD5CryptoServiceProvider,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-029A&quot;,&quot;&quot;,MD5CryptoServiceProvider,0)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-030A&quot;,&quot;&quot;,MD5CryptoServiceProvider,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-031N&quot;,&quot;&quot;,SHA1CryptoServiceProvider,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-032A&quot;,&quot;&quot;,SHA1CryptoServiceProvider,0)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-033A&quot;,&quot;&quot;,SHA1CryptoServiceProvider,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-034N&quot;,&quot;&quot;,SHA1Managed,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-035A&quot;,&quot;&quot;,SHA1Managed,0)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-036A&quot;,&quot;&quot;,SHA1Managed,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-037N&quot;,&quot;&quot;,SHA256Managed,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-038A&quot;,&quot;&quot;,SHA256Managed,0)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-039A&quot;,&quot;&quot;,SHA256Managed,-1)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-040N&quot;,&quot;&quot;,SHA384Managed,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-041A&quot;,&quot;&quot;,SHA384Managed,0)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-042A&quot;,&quot;&quot;,SHA384Managed,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-043N&quot;,&quot;&quot;,SHA512Managed,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-044A&quot;,&quot;&quot;,SHA512Managed,0)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-045A&quot;,&quot;&quot;,SHA512Managed,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-046N&quot;,null,Default,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-047A&quot;,null,Default,0)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-048A&quot;,null,Default,-1)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-016N&quot;,&quot;test@123&quot;,SHA384Managed,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-050A&quot;,null,MD5CryptoServiceProvider,0)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-051A&quot;,null,MD5CryptoServiceProvider,-1)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-052N&quot;,null,SHA1CryptoServiceProvider,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-053A&quot;,null,SHA1CryptoServiceProvider,0)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-054A&quot;,null,SHA1CryptoServiceProvider,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-055N&quot;,null,SHA1Managed,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-056A&quot;,null,SHA1Managed,0)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-015A&quot;,&quot;test@123&quot;,SHA256Managed,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-058N&quot;,null,SHA256Managed,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-059A&quot;,null,SHA256Managed,0)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-060A&quot;,null,SHA256Managed,-1)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-061N&quot;,null,SHA384Managed,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-062A&quot;,null,SHA384Managed,0)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-063A&quot;,null,SHA384Managed,-1)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-064N&quot;,null,SHA512Managed,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-065A&quot;,null,SHA512Managed,0)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-066A&quot;,null,SHA512Managed,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-049N&quot;,null,MD5CryptoServiceProvider,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-002A&quot;,&quot;test@123&quot;,Default,0)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-003A&quot;,&quot;test@123&quot;,Default,-1)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-057A&quot;,null,SHA1Managed,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-004N&quot;,&quot;test@123&quot;,MD5CryptoServiceProvider,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-005A&quot;,&quot;test@123&quot;,MD5CryptoServiceProvider,0)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-006A&quot;,&quot;test@123&quot;,MD5CryptoServiceProvider,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-007N&quot;,&quot;test@123&quot;,SHA1CryptoServiceProvider,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-008A&quot;,&quot;test@123&quot;,SHA1CryptoServiceProvider,0)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-009A&quot;,&quot;test@123&quot;,SHA1CryptoServiceProvider,-1)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-010N&quot;,&quot;test@123&quot;,SHA1Managed,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-011A&quot;,&quot;test@123&quot;,SHA1Managed,0)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-012A&quot;,&quot;test@123&quot;,SHA1Managed,-1)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-013N&quot;,&quot;test@123&quot;,SHA256Managed,10)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.GetHashTest.GetSaltedPasswdTest(&quot;TestID-014A&quot;,&quot;test@123&quot;,SHA256Managed,0)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GetKeyedHashTest" executed="True" result="Success" success="True" time="2.549" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="GetKeyedHashBytesTest" executed="True" result="Success" success="True" time="0.388" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-001N&quot;,System.Byte[],Default,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-002N&quot;,System.Byte[],Default,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-003L&quot;,System.Byte[],Default,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-004A&quot;,null,Default,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-005L&quot;,System.Byte[],Default,&quot;&quot;)" executed="True" result="Success" success="True" time="0.025" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-006A&quot;,System.Byte[],Default,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-007N&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.027" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-008N&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-009L&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-010A&quot;,null,HMACSHA1,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-011N&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.026" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-012N&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-013L&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-014A&quot;,null,MACTripleDES,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-015A&quot;,System.Byte[],999,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-016A&quot;,System.Byte[],999,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.015" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-017A&quot;,System.Byte[],999,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest(&quot;TestID-018A&quot;,null,999,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetKeyedHashBytesTest2" executed="True" result="Success" success="True" time="0.958" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-001N&quot;,System.Byte[],Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-002N&quot;,System.Byte[],Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-003L&quot;,System.Byte[],Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.026" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-004A&quot;,null,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-005L&quot;,System.Byte[],Default,&quot;&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.021" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-006A&quot;,System.Byte[],Default,null,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-007N&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-008N&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-009L&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-010A&quot;,null,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-011N&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.026" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-012N&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-013L&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-014A&quot;,null,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-015N&quot;,System.Byte[],999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-016N&quot;,System.Byte[],999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-017L&quot;,System.Byte[],999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.017" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-018A&quot;,null,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.012" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-019N&quot;,System.Byte[],Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-020N&quot;,System.Byte[],Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.026" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-021L&quot;,System.Byte[],Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-022A&quot;,null,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-023L&quot;,System.Byte[],Default,&quot;&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-024A&quot;,System.Byte[],Default,null,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-025N&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-026N&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.021" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-027L&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-028A&quot;,null,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.015" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-029N&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-030N&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-031L&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-032A&quot;,null,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-033A&quot;,System.Byte[],999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-034A&quot;,System.Byte[],999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-035A&quot;,System.Byte[],999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-036A&quot;,null,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.015" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-037A&quot;,System.Byte[],Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-038A&quot;,System.Byte[],Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-039A&quot;,System.Byte[],Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-040A&quot;,null,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-041A&quot;,System.Byte[],Default,&quot;&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-042A&quot;,System.Byte[],Default,null,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-043A&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-044A&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-045A&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-046A&quot;,null,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-047A&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-048A&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-049A&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-050A&quot;,null,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-051A&quot;,System.Byte[],999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-052A&quot;,System.Byte[],999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-053A&quot;,System.Byte[],999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-054A&quot;,null,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-055A&quot;,System.Byte[],Default,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-056A&quot;,System.Byte[],Default,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-057A&quot;,System.Byte[],Default,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-058A&quot;,null,Default,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-059A&quot;,System.Byte[],Default,&quot;&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-060A&quot;,System.Byte[],Default,null,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-061A&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-062A&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-063A&quot;,System.Byte[],HMACSHA1,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-064A&quot;,null,HMACSHA1,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-065A&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-066A&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-067A&quot;,System.Byte[],MACTripleDES,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-068A&quot;,null,MACTripleDES,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-069A&quot;,System.Byte[],999,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-070A&quot;,System.Byte[],999,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-071A&quot;,System.Byte[],999,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashBytesTest2(&quot;TestID-072A&quot;,null,999,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetKeyedHashStringTest" executed="True" result="Success" success="True" time="0.333" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-002N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,Default,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-006A&quot;,&quot;abcde&quot;,Default,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-007N&quot;,&quot;abcde&quot;,HMACSHA1,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-008N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,HMACSHA1,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-009L&quot;,&quot;&quot;,HMACSHA1,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-010A&quot;,null,HMACSHA1,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-011N&quot;,&quot;abcde&quot;,MACTripleDES,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-012N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,MACTripleDES,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-013L&quot;,&quot;&quot;,MACTripleDES,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-005L&quot;,&quot;abcde&quot;,Default,&quot;&quot;)" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-015A&quot;,&quot;abcde&quot;,999,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-016A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,999,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-017A&quot;,&quot;&quot;,999,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-018A&quot;,null,999,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-014A&quot;,null,MACTripleDES,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-001N&quot;,&quot;abcde&quot;,Default,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-003L&quot;,&quot;&quot;,Default,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest(&quot;TestID-004A&quot;,null,Default,&quot;test@123&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetKeyedHashStringTest2" executed="True" result="Success" success="True" time="0.851" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-001N&quot;,&quot;abcde&quot;,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.026" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-002N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-003L&quot;,&quot;&quot;,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-004A&quot;,null,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-005L&quot;,&quot;abcde&quot;,Default,&quot;&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-006A&quot;,&quot;abcde&quot;,Default,null,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-007N&quot;,&quot;abcde&quot;,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-008N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-009L&quot;,&quot;&quot;,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.025" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-010A&quot;,null,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-011N&quot;,&quot;abcde&quot;,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.026" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-012N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-013L&quot;,&quot;&quot;,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-014A&quot;,null,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-015N&quot;,&quot;abcde&quot;,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.014" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-016N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.015" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-017L&quot;,&quot;&quot;,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-018A&quot;,null,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-019N&quot;,&quot;abcde&quot;,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-020N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.021" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-021L&quot;,&quot;&quot;,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.024" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-022A&quot;,null,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-023L&quot;,&quot;abcde&quot;,Default,&quot;&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-024A&quot;,&quot;abcde&quot;,Default,null,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-025N&quot;,&quot;abcde&quot;,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-026N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-027L&quot;,&quot;&quot;,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.025" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-028A&quot;,null,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-029N&quot;,&quot;abcde&quot;,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-030N&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.022" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-031L&quot;,&quot;&quot;,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.023" asserts="3" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-032A&quot;,null,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-033A&quot;,&quot;abcde&quot;,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-034A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-035A&quot;,&quot;&quot;,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.013" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-036A&quot;,null,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-037A&quot;,&quot;abcde&quot;,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-038A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-039A&quot;,&quot;&quot;,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-040A&quot;,null,Default,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-041A&quot;,&quot;abcde&quot;,Default,&quot;&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-042A&quot;,&quot;abcde&quot;,Default,null,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-043A&quot;,&quot;abcde&quot;,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-044A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-045A&quot;,&quot;&quot;,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-046A&quot;,null,HMACSHA1,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-047A&quot;,&quot;abcde&quot;,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-048A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-049A&quot;,&quot;&quot;,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-050A&quot;,null,MACTripleDES,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-051A&quot;,&quot;abcde&quot;,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-052A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-053A&quot;,&quot;&quot;,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-054A&quot;,null,999,&quot;test@123&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-055A&quot;,&quot;abcde&quot;,Default,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-056A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,Default,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-057A&quot;,&quot;&quot;,Default,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-058A&quot;,null,Default,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-059A&quot;,&quot;abcde&quot;,Default,&quot;&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-060A&quot;,&quot;abcde&quot;,Default,null,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-061A&quot;,&quot;abcde&quot;,HMACSHA1,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-062A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,HMACSHA1,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-063A&quot;,&quot;&quot;,HMACSHA1,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-064A&quot;,null,HMACSHA1,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-065A&quot;,&quot;abcde&quot;,MACTripleDES,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-066A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,MACTripleDES,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-067A&quot;,&quot;&quot;,MACTripleDES,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-068A&quot;,null,MACTripleDES,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-069A&quot;,&quot;abcde&quot;,999,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-070A&quot;,&quot;\x3042\x3044\x3046\x3048\x304A&quot;,999,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-071A&quot;,&quot;&quot;,999,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.GetKeyedHashTest.GetKeyedHashStringTest2(&quot;TestID-072A&quot;,null,999,&quot;test@123&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LatebindTest" description="Tests for Latebind" executed="True" result="Failure" success="False" time="0.786" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="CheckTypeOfBaseClassTest" executed="True" result="Success" success="True" time="0.021" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfBaseClassTest(&quot;TestID-001N&quot;,Touryo.Infrastructure.Public.Util.Latebind,System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfBaseClassTest(&quot;TestID-002N&quot;,System.String,System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfBaseClassTest(&quot;TestID-003N&quot;,System.Double,System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfBaseClassTest(&quot;TestID-004N&quot;,Public.Test.Util.LatebindTest,System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfBaseClassTest(&quot;TestID-005A&quot;,Touryo.Infrastructure.Public.Util.Latebind,null)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfBaseClassTest(&quot;TestID-006A&quot;,null,Touryo.Infrastructure.Public.Util.Latebind)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfBaseClassTest(&quot;TestID-007A&quot;,null,null)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CheckTypeOfMethodByNameTest" executed="True" result="Success" success="True" time="0.022" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfMethodByNameTest(&quot;TestID-001N&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;CheckTypeOfMethodByName&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfMethodByNameTest(&quot;TestID-002N&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;InvokeMethod&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfMethodByNameTest(&quot;TestID-003N&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;InvokeMethod_NoErr&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfMethodByNameTest(&quot;TestID-004A&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;WrongMethodName&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfMethodByNameTest(&quot;TestID-005A&quot;,Touryo.Infrastructure.Public.Util.Latebind,null)" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfMethodByNameTest(&quot;TestID-006A&quot;,null,&quot;WrongMethodName&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.CheckTypeOfMethodByNameTest(&quot;TestID-007A&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="InvokeMethod_NoErr1Test" executed="True" result="Failure" success="False" time="0.074" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-001N&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-002N&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;CheckTypeOfBaseClass&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-003N&quot;,Touryo.Infrastructure.Public.IO.BinarySerialize,&quot;DeepClone&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-004N&quot;,Public.Test.Util.TestLateBind,&quot;Add&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-005N&quot;,Public.Test.Util.TestLateBind,&quot;Add&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-006N&quot;,Public.Test.Util.TestLateBind,&quot;DisplayData&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-007A&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;WrongCheckTypeOfBaseClass&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(String testCaseID, Object objectClass, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 208
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-008A&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;CheckTypeOfBaseClass&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-009A&quot;,Public.Test.Util.TestLateBind,&quot;Add&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.004" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(String testCaseID, Object objectClass, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 208
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-0010A&quot;,Public.Test.Util.TestLateBind,&quot;Add&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.003" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(String testCaseID, Object objectClass, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 208
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-0011A&quot;,Public.Test.Util.TestLateBind,&quot;Add&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-0012A&quot;,Public.Test.Util.TestLateBind,null,System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErr1Test(&quot;TestID-0013A&quot;,null,&quot;Add&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.004" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="InvokeMethod_NoErrTest" executed="True" result="Failure" success="False" time="0.231" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-001N&quot;,&quot;C:\\root\\Tests\\Dll\\Public.dll&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-002N&quot;,&quot;C:\\root\\Tests\\Dll\\Public.dll&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-003N&quot;,&quot;C:\\root\\Tests\\Dll\\Public.dll&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;InvokeMethod&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-004N&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-005N&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-006N&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;InvokeMethod&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-007N&quot;,&quot;Public.Test&quot;,&quot;Public.Test.Util.TestLateBind&quot;,&quot;Display&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-007A&quot;,&quot;C:\\root\\Tests\\Dll\\WrongPublic.dll&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.003" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-008A&quot;,&quot;C:\\root\\Tests\\Dll\\Public.&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-009A&quot;,&quot;AbcdAssembly&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0010A&quot;,&quot;C:\\root\\Tests\\Dll\\Public.dll&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind.cs&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0011A&quot;,&quot;Public&quot;,&quot;WrongClassLatebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0012A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;WrongMethodName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0013A&quot;,&quot;C:\\root\\Tests\\Dll\\Public.dll&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByNameNotExist&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0014A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;InvokeMethod&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0015A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;InvokeMethod&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0016A&quot;,&quot;&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0017A&quot;,&quot;Public&quot;,&quot;&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0018A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="1">
                                <failure>
                                  <message><![CDATA[  Expected: not null
  But was:  null
]]></message>
                                  <stack-trace><![CDATA[場所 Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 157
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0019A&quot;,null,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0020A&quot;,&quot;Public&quot;,null,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0021A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,null,System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod_NoErrTest(&quot;TestID-0022A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="InvokeMethod1Test" executed="True" result="Failure" success="False" time="0.135" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-001N&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-002N&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;CheckTypeOfBaseClass&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-003N&quot;,Touryo.Infrastructure.Public.IO.BinarySerialize,&quot;DeepClone&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-004N&quot;,Public.Test.Util.TestLateBind,&quot;Add&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-005N&quot;,Public.Test.Util.TestLateBind,&quot;Add&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-006N&quot;,Public.Test.Util.TestLateBind,&quot;DisplayData&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-006A&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;WrongCheckTypeOfBaseClass&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[Public, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]、クラス名：[Touryo.Infrastructure.Public.Util.Latebind]に、メソッド名：[WrongCheckTypeOfBaseClass]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(Object objectClass, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 205
場所 Public.Test.Util.LatebindTest.InvokeMethod1Test(String testCaseID, Object objectClass, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 182
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-007A&quot;,Touryo.Infrastructure.Public.Util.Latebind,&quot;CheckTypeOfBaseClass&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-008A&quot;,Public.Test.Util.TestLateBind,&quot;Add&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.005" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[Public.Test, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]、クラス名：[Public.Test.Util.TestLateBind]に、引数の数が一致するメソッド名：[Add]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(Object objectClass, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 242
場所 Public.Test.Util.LatebindTest.InvokeMethod1Test(String testCaseID, Object objectClass, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 182
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-009A&quot;,Public.Test.Util.TestLateBind,&quot;Add&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[Public.Test, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]、クラス名：[Public.Test.Util.TestLateBind]に、引数の数が一致するメソッド名：[Add]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(Object objectClass, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 242
場所 Public.Test.Util.LatebindTest.InvokeMethod1Test(String testCaseID, Object objectClass, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 182
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-0010A&quot;,Public.Test.Util.TestLateBind,&quot;Add&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-0011A&quot;,Public.Test.Util.TestLateBind,null,System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethod1Test(&quot;TestID-0012A&quot;,null,&quot;Add&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="InvokeMethodTest" executed="True" result="Failure" success="False" time="0.266" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-001N&quot;,&quot;C:\\root\\Tests\\Dll\\Public.dll&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Error" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[System.ArgumentException : アセンブリ名：[C:\root\Tests\Dll\Public.dll]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 86
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-002N&quot;,&quot;C:\\root\\Tests\\Dll\\Public.dll&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Error" success="False" time="0.003" asserts="0">
                                <failure>
                                  <message><![CDATA[System.ArgumentException : アセンブリ名：[C:\root\Tests\Dll\Public.dll]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 86
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-003N&quot;,&quot;C:\\root\\Tests\\Dll\\Public.dll&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;InvokeMethod&quot;,System.Object[])" executed="True" result="Error" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[System.ArgumentException : アセンブリ名：[C:\root\Tests\Dll\Public.dll]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 86
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-004N&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-005N&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-006N&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;InvokeMethod&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-007A&quot;,&quot;C:\\root\\Tests\\Dll\\WrongPublic.dll&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[C:\root\Tests\Dll\WrongPublic.dll]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 86
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-008A&quot;,&quot;C:\\root\\Tests\\Dll\\Public.&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[C:\root\Tests\Dll\Public.]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 86
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-009A&quot;,&quot;AbcdAssembly&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[AbcdAssembly]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 86
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0010A&quot;,&quot;C:\\root\\Tests\\Dll\\Public.dll&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind.cs&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[C:\root\Tests\Dll\Public.dll]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 86
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0011A&quot;,&quot;Public&quot;,&quot;WrongClassLatebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[Public]に、クラス名：[WrongClassLatebind]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 96
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0012A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;WrongMethodName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[Public]、クラス名：[Touryo.Infrastructure.Public.Util.Latebind]に、メソッド名：[WrongMethodName]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 113
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0013A&quot;,&quot;C:\\root\\Tests\\Dll\\Public.dll&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByNameNotExist&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[C:\root\Tests\Dll\Public.dll]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 86
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0014A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;InvokeMethod&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.006" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[Public]、クラス名：[Touryo.Infrastructure.Public.Util.Latebind]に、引数の数が一致するメソッド名：[InvokeMethod]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 149
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0015A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;InvokeMethod&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.006" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[Public]、クラス名：[Touryo.Infrastructure.Public.Util.Latebind]に、引数の数が一致するメソッド名：[InvokeMethod]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 149
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0016A&quot;,&quot;&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 86
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0017A&quot;,&quot;Public&quot;,&quot;&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0018A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[Public]、クラス名：[Touryo.Infrastructure.Public.Util.Latebind]に、メソッド名：[]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 113
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0019A&quot;,null,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Failure" success="False" time="0.005" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : アセンブリ名：[]が存在しません。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.Latebind.InvokeMethod(String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\Latebind.cs:行 86
場所 Public.Test.Util.LatebindTest.InvokeMethodTest(String testCaseID, String assemblyName, String className, String methodName, Object[] paramSet) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\LatebindTest.cs:行 132
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0020A&quot;,&quot;Public&quot;,null,&quot;CheckTypeOfMethodByName&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0021A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,null,System.Object[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.LatebindTest.InvokeMethodTest(&quot;TestID-0022A&quot;,&quot;Public&quot;,&quot;Touryo.Infrastructure.Public.Util.Latebind&quot;,&quot;CheckTypeOfMethodByName&quot;,null)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ObjectInspectorTest1" description="Tests for Object Inspector" executed="True" result="Success" success="True" time="0.074" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="InspectTest" executed="True" result="Success" success="True" time="0.073" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-001N&quot;,System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-002N&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-003N&quot;,234)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-004N&quot;,&quot;Test&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-005N&quot;,System.String[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-006N&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-007N&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-008N&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-009N&quot;,System.Object[])" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-010N&quot;,System.Int32[][][][][][])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-011N&quot;,06/19/2014 12:35:39)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-012N&quot;,System.Collections.Generic.Dictionary`2[System.String,System.Int32])" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-013N&quot;,Public.Test.Util.ObjectInspectorTest1+XYData)" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-014N&quot;,Public.Test.Util.ObjectInspectorTest1+MyClass1)" executed="True" result="Success" success="True" time="0.005" asserts="3" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-015N&quot;,Public.Test.Util.ObjectInspectorTest1+MyClass2)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-016N&quot;,Public.Test.Util.ObjectInspectorTest1+MyClass3)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-0017L&quot;,null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.ObjectInspectorTest1.InspectTest(&quot;TestID-0018L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PerformanceRecorderTest1" description="Tests for Performance Recorder" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="EndsPerformanceRecordTest" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PerformanceRecorderTest1.EndsPerformanceRecordTest(&quot;TestID-001N&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="StartsPerformanceRecordTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PerformanceRecorderTest1.StartsPerformanceRecordTest(&quot;TestID-001N&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PubCmnFunctionTest" description="Tests for Pub Cmn Function" executed="True" result="Failure" success="False" time="0.430" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="BuiltStringIntoEnvironmentVariableTest" executed="True" result="Success" success="True" time="0.030" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.BuiltStringIntoEnvironmentVariableTest(&quot;TestID-001N&quot;,&quot;%test&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.BuiltStringIntoEnvironmentVariableTest(&quot;TestID-002N&quot;,&quot;%test test&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.BuiltStringIntoEnvironmentVariableTest(&quot;TestID-003N&quot;,&quot;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\\r\n                                                               v1.0\\;C:\\Program Files\\Windows Imaging\\;C:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\;\r\n                                                               C:\\Program Files\\Microsoft SQL Server\\100\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\100\\\r\n                                                               Tools\\Binn\\VSShell\\Common7\\IDE\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Program Files\r\n                                                               \\Microsoft ASP.NET\\ASP.NET Web Pages\\v1.0\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.BuiltStringIntoEnvironmentVariableTest(&quot;TestID-003N&quot;,&quot;%USERPROFILE%\\AppData\\Local\\Temp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.BuiltStringIntoEnvironmentVariableTest(&quot;TestID-004N&quot;,&quot;.;C:\\PROGRA~1\\IBM\\SQLLIB\\java\\db2java.zip;C:\\PROGRA~1\\IBM\\SQLLIB\\java\\db2jcc.jar;C:\\PROGRA~1\\IBM\\\r\n                                               SQLLIB\\java\\sqlj.zip;C:\\PROGRA~1\\IBM\\SQLLIB\\java\\db2jcc_license_cu.jar;C:\\PROGRA~1\\IBM\\SQLLIB\\bin;C:\\PROGRA~1\\IBM\\\r\n                                               SQLLIB\\java\\common.jar&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.BuiltStringIntoEnvironmentVariableTest(&quot;TestID-005L&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.BuiltStringIntoEnvironmentVariableTest(&quot;TestID-006L&quot;,null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.BuiltStringIntoEnvironmentVariableTest(&quot;TestID-007A&quot;,&quot;--***-**-8j@\\|//^&amp;$#!~`?&lt;&gt;:;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.BuiltStringIntoEnvironmentVariableTest(&quot;TestID-008A&quot;,&quot;%USEuRPROFILE%\\AppData\\Local\\Tempu&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CalculateSessionSizeKBTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.CalculateSessionSizeKBTest(&quot;TestID-001N&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CalculateSessionSizeMBTest" executed="True" result="Success" success="True" time="0.004" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.CalculateSessionSizeMBTest(&quot;TestID-001N&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="CalculateSessionSizeTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.CalculateSessionSizeTest(&quot;TestID-001N&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetCommandArgsTest" executed="True" result="Success" success="True" time="0.028" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetCommandArgsTest(&quot;TestID-001N&quot;,'/')" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetCommandArgsTest(&quot;TestID-002N&quot;,'Z')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetCommandArgsTest(&quot;TestID-003N&quot;,'\\')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetCommandArgsTest(&quot;TestID-004A&quot;,'o')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetCommandArgsTest(&quot;TestID-005A&quot;,'\&quot;')" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetCommandArgsTest(&quot;TestID-006A&quot;,'\&quot;')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetCommandArgsTest(&quot;TestID-007A&quot;,' ')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetCommandArgsTest(&quot;TestID-008A&quot;,'2')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetCommandArgsTest(&quot;TestID-009A&quot;,&quot;Vtry&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetCurrentCodeInfo" executed="True" result="Success" success="True" time="0.001" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetCurrentCodeInfo(&quot;TestID-001N&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetCurrentMethodNameTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetCurrentMethodNameTest(&quot;TestID-001N&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetCurrentPropertyNameTest" executed="True" result="Success" success="True" time="0.002" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetCurrentPropertyNameTest(&quot;TestID-001N&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetFileNameNoExTest" executed="True" result="Success" success="True" time="0.033" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetFileNameNoExTest(&quot;TestID-001N&quot;,&quot;DaoOrders.cs,DaoOrdersTest.vb&quot;,',')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetFileNameNoExTest(&quot;TestID-002L&quot;,&quot;DaoOrders.cs,DaoOrdersd.vb&quot;,'\0')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetFileNameNoExTest(&quot;TestID-003L&quot;,&quot;DaoOrders.cs&quot;,'\0')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetFileNameNoExTest(&quot;TestID-004L&quot;,&quot;DaoOrders.csDaoOrdersTest&quot;,'\0')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetFileNameNoExTest(&quot;TestID-005A&quot;,&quot;DaoOrders.cs&quot;,',')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetFileNameNoExTest(&quot;TestID-006A&quot;,&quot;DaoOrders.cs,&quot;,'\0')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetFileNameNoExTest(&quot;TestID-007A&quot;,&quot;DaoOrders.cs,&quot;,',')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetFileNameNoExTest(&quot;TestID-008A&quot;,&quot;DaoOrders.cs,DaoOrders.vb&quot;,'-')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetFileNameNoExTest(&quot;TestID-009A&quot;,&quot;DaoOrders.cs,DaoOrders.vb&quot;,',')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetFileNameNoExTest(&quot;TestID-010A&quot;,&quot;DaoOrders.cs,DaoOrdersTest&quot;,',')" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetLongFromByteTest" executed="True" result="Success" success="True" time="0.021" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetLongFromByteTest(&quot;TestID-001N&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetLongFromByteTest(&quot;TestID-002L&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetLongFromByteTest(&quot;TestID-003L&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.003" asserts="0" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetLongFromByteTest(&quot;TestID-004L&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetLongFromByteTest(&quot;TestID-005L&quot;,System.Byte[])" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="GetPropsFromPropStringTest" executed="True" result="Failure" success="False" time="0.205" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-001N&quot;,&quot;CategoryID=0001;CategoryName=Test&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-002N&quot;,&quot;CategoryID{=}0001;CategoryName=Test&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：プロパティ名の区切り文字が不正です。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 245
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-003A&quot;,&quot;=CategoryID=0001;CategoryName=Test&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：開始文字が不正です（=、;、}、）。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 107
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-004A&quot;,&quot;;CategoryID=0001;CategoryName=Test&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：開始文字が不正です（=、;、}、）。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 107
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-005A&quot;,&quot;}CategoryID=0001;CategoryName=Test&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：開始文字が不正です（=、;、}、）。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 107
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-006A&quot;,&quot;CategoryID0001;CategoryName=Test&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：プロパティ名の区切り文字が不正です。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 245
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-007A&quot;,&quot;Category=ID0001CategoryName=Test&quot;)" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：プロパティ値の区切り文字が不正です。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 214
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-008A&quot;,&quot;{CategoryID=0001;CategoryName=Test&quot;)" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：エスケープ文字が不正です（C）。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 142
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-009A&quot;,&quot;=0001;CategoryName=Test&quot;)" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：開始文字が不正です（=、;、}、）。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 107
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-010A&quot;,&quot;CategoryID=;CategoryName=Test&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：プロパティ値が空です。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 226
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-011A&quot;,&quot;{CategoryID=0;CategoryName=Test&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：エスケープ文字が不正です（C）。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 142
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-012A&quot;,&quot;CategoryID=0;CategoryName=&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-013A&quot;,&quot;CategoryID=0;CategoryName=cat\r\ndog\r\nanimal\r\nperson&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-014A&quot;,&quot;3CategoryID=0,CategoryName=cat&quot;)" executed="True" result="Failure" success="False" time="0.003" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：プロパティ値の区切り文字が不正です。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 214
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-015A&quot;,&quot;CategoryID{=0001;CategoryName=Test&quot;)" executed="True" result="Failure" success="False" time="0.004" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：中括弧が正しく閉じられていません。-1]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 158
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-016A&quot;,&quot;CategoryID}=0001;CategoryName=Test&quot;)" executed="True" result="Failure" success="False" time="0.005" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：中括弧が正しく閉じられていません。-2]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 184
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(&quot;TestID-017A&quot;,&quot;CategoryID=0001;=Test&quot;)" executed="True" result="Failure" success="False" time="0.002" asserts="0">
                                <failure>
                                  <message><![CDATA[An unexpected exception type was thrown
Expected: System.ArgumentNullException
 but was: System.ArgumentException : プロパティ文字列フォーマットが不正です。：プロパティ名が空です。]]></message>
                                  <stack-trace><![CDATA[場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.ThrowPropStringFormatException(String detail) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 314
場所 Touryo.Infrastructure.Public.Util.PubCmnFunction.GetPropsFromPropString(String propString) 場所 C:\Appmills2\git\root\programs\C#\Frameworks\Infrastructure\Public\Util\PubCmnFunction.cs:行 195
場所 Public.Test.Util.PubCmnFunctionTest.GetPropsFromPropStringTest(String testCaseID, String propString) 場所 C:\OpenTouryo\root\programs\C#\Tests\Public.Test\Util\PubCmnFunctionTest.cs:行 365
]]></stack-trace>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedTest" name="ShortenByteArrayTest" executed="True" result="Success" success="True" time="0.028" asserts="0">
                            <results>
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.ShortenByteArrayTest(&quot;TestID-001N&quot;,System.Byte[],1)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.ShortenByteArrayTest(&quot;TestID-002N&quot;,System.Byte[],2)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.ShortenByteArrayTest(&quot;TestID-003L&quot;,System.Byte[],0)" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.ShortenByteArrayTest(&quot;TestID-004L&quot;,System.Byte[],0)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.ShortenByteArrayTest(&quot;TestID-005L&quot;,System.Byte[],2)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.ShortenByteArrayTest(&quot;TestID-006L&quot;,System.Byte[],2)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.ShortenByteArrayTest(&quot;TestID-007N&quot;,System.Byte[],4)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                              <test-case name="Public.Test.Util.PubCmnFunctionTest.ShortenByteArrayTest(&quot;TestID-008A&quot;,System.Byte[],5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>