<?xml version="1.0"?>
<!-- 
    メモ: このファイルを手動で編集する代わりに、Web 管理ツールを使用 
    してアプリケーションの設定を構成することができます。Visual Studio 
    の [Web サイト] メニューにある [ASP.NET 構成] オプションから設定
    を行ってください。設定およびコマンドの一覧は、通常
    \Windows\Microsoft.Net\Framework\v2.x\Config にある
    machine.config.comments で確認できます。
-->
<configuration>
  <!-- ajaxの設定（バージョンなどに注意する。） -->
  <!-- appSettingsの設定 -->
  <appSettings file="app.config"/>
  <!-- connectionStringsの設定 -->
  <connectionStrings>
    <!-- SQL Server / SQL Client用 -->
    <add name="ConnectionString_SQL" connectionString="Data Source=localhost\sqlexpress;Initial Catalog=Northwind;Integrated Security=True;"/>
    <!-- Multi-DB / OLEDB.NET用 -->
    <add name="ConnectionString_OLE" connectionString="Provider=SQLNCLI10.1;Data Source=localhost\sqlexpress;Integrated Security=SSPI;Initial Catalog=Northwind;"/>
    <!-- Multi-DB / ODCB.NET用 -->
    <add name="ConnectionString_ODBC" connectionString="Dsn=odbc_test1"/>
  </connectionStrings>
  <!-- ASP.NETのパラメータ -->
  <!--
    For a description of web.config changes see http://go.microsoft.com/fwlink/?LinkId=235367.

    The following attributes can be set on the <httpRuntime> tag.
      <system.Web>
        <httpRuntime targetFramework="4.6" />
      </system.Web>
  -->
  <system.web>
    <!-- 
      デバッグ シンボルをコンパイルされたページに挿入
      するには、compilation debug="true" に設定します。
      この設定はパフォーマンスに影響するため、
      開発時のみこの値をtrue に設定してください。
      
      詳細は、下記URLを参照のこと。
      http://msdn2.microsoft.com/ja-jp/library/s10awwz0.aspx
      http://msdn2.microsoft.com/ja-jp/library/s10awwz0(VS.80).aspx
    -->
    <!-- リリース時は、debug="false"に変更してください。 -->
    <compilation debug="true" targetFramework="4.6"/>
    <!--
      グローバリゼーション
      
      globalization 要素
      http://msdn2.microsoft.com/ja-jp/library/hy4kkhe0.aspx
      http://msdn2.microsoft.com/ja-jp/library/hy4kkhe0(VS.80).aspx
           
      CultureInfo クラス
      http://msdn2.microsoft.com/ja-jp/library/system.globalization.cultureinfo.aspx
      http://msdn2.microsoft.com/ja-jp/library/system.globalization.cultureinfo(VS.80).aspx

      CultureInfo("ja")　と　CultureInfo("ja-JP") の違い
      http://blogs.wankuma.com/ogiogi/archive/2007/12/10/112403.aspx
    -->
    <globalization requestEncoding="utf-8" responseEncoding="utf-8" responseHeaderEncoding="utf-8" culture="ja-JP" uiCulture="ja-JP"/>
    <!--
      セッションの設定
      
      本設定のパラメタは、別途検討すること。
      属性                          :目的
      timeout                       :セッション状態プロバイダがセッションを終了するまでに、要求間で許容される時間 (分単位) を設定する。
      cookieless                    :セッションIDをURLに埋め込む（true）か、cookie に格納する（false）かを設定する。
      mode                          :現在のセッション状態モードを設定する。
      
      詳細は、下記URLを参照のこと。
      http://msdn2.microsoft.com/ja-jp/library/h6bb9cz9.aspx
      http://msdn2.microsoft.com/ja-jp/library/h6bb9cz9(VS.80).aspx
    -->
    <!-- インプロセス -->
    <!--sessionState timeout="20" cookieless="false" mode="InProc"></sessionState-->
    <!--
      ステートサーバ（利用の際は、管理ツール「サービス」から、ASP.NET 状態サービスを開始しておくこと。）
      開発フェーズでステートサーバを選択しておけば、本番環境は、どのモードにも対応できる。
    -->
    <sessionState timeout="20" cookieless="false" mode="StateServer" stateConnectionString="tcpip=127.0.0.1:42424"/>
    <!--
      SQLサーバ（利用の際は、以下のスクリプトを実行する）
      C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727
      ・InstallSqlState.sql（UninstallSqlState.sql）
      ・InstallPersistSqlState.sql（UninstallPersistSqlState.sql）
           
      [HOWTO] SQL Server で ASP.NET セッション状態管理を構成する方法
      http://support.microsoft.com/kb/317604/ja
           
      ※ Express Editionは、SQL Server 2005以降、SQL Serverエージェントを搭載しないので利用できない。
    -->
    <!--sessionState timeout="20" cookieless="false" mode="SQLServer" 
            sqlConnectionString="Data Source=xxx.xxx.xxx.xxx;User ID=xxx;Password=xxx;"/-->
    <!--
      Oracleサーバ（利用の際は、以下のスクリプトを実行する）           
      C:\app\Administrator\product\11.1.0\client_1\ASP.NET\SQL
      ・InstallOracleSessionState.sql(UninstallOracleSessionState.sql)
      ・InstallOracleSessionState92.sql(UninstallOracleSessionState92.sql)

      Oracle Providers for ASP.NET開発者ガイド > Oracle Providers for ASP.NETのインストール
      http://otndnld.oracle.co.jp/document/products/oracle11g/111/windows/E06106-01/IntroInstallation.htm
           
      Oracle Providers for ASP.NET開発者ガイド > OracleSessionStateStoreクラス
      http://otndnld.oracle.co.jp/document/products/oracle11g/111/windows/E06106-01/OracleSessionStateStoreClass.htm
    -->
    <!--sessionState timeout="20" cookieless="false" mode="Custom" customProvider="MyOracleSessionStateStore">
      <providers>
        <add name="MyOracleSessionStateStore"
           type="Oracle.Web.SessionState.OracleSessionStateStore, 
                 Oracle.Web, Version=2.111.6.20, Culture=neutral, 
               PublicKeyToken=89b483f429c47342"
               connectionStringName="ConnectionString_ODP2"/>
      </providers>
    </sessionState-->
    <!--
      認証の設定 
      
      このセクションは、アプリケーションの認証ポリシーを設定します。
      使用できるモードは、"Windows"、"Forms"、"Passport" および "None" です。
          
      詳細は、下記URLを参照のこと。
      http://msdn2.microsoft.com/ja-jp/library/532aee0e.aspx
      http://msdn2.microsoft.com/ja-jp/library/532aee0e(VS.80).aspx
      
    -->
    <!-- Windows認証 -->
    <authentication mode="Windows"/>
    <!--
      権限の設定
         
      このセクションは、アプリケーションの権限のポリシーを設定します。
      この設定により、ユーザーまたはロールによるアプリケーション
      リソースへのアクセスを許可したり、拒否したりできます。
      ワイルドカード : "*" は全員を、"?" は匿名 (未認証) ユーザーを表します。
        
      詳細は、下記URLを参照のこと。
      http://msdn2.microsoft.com/ja-jp/library/8d82143t.aspx
      http://msdn2.microsoft.com/ja-jp/library/8d82143t(VS.80).aspx
    -->
    <authorization>
      <!-- 全ユーザーへの許可 -->
      <allow users="*"/>
      <!-- 匿名ユーザーの禁止 -->
      <!--deny users="?"/-->
      <!--  
        <allow  users="[ユーザーのコンマ区切り一覧]"
            roles="[ロールのコンマ区切り一覧]"/>
        <deny  users="[ユーザーのコンマ区切り一覧]"
            roles="[ロールのコンマ区切り一覧]"/>
      -->
    </authorization>
    <!-- 偽装する場合は以下を有効にする -->
    <!-- identity impersonate="true" userName="xxxx" password="xxxx" / -->
    <!--
      <customErrors> セクションは、要求の実行中にハンドル
      されていないエラーが発生した場合の処理方法の構成を
      有効にします。具体的には、開発者が HTML エラー
      ページをスタック トレースのエラーの代わりに表示
      するように構成することを可能にします。
        
      ※ アプリケーションで発生した例外は、Application_Errorで全てのエラーを処理する。
      ※ HTTP状態コードに対応するHTMLを設定する場合は、ここを設定する。
        
      <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
        <error statusCode="403" redirect="NoAccess.htm" />
        <error statusCode="404" redirect="FileNotFound.htm" />
      </customErrors>

      詳細は、下記URLを参照のこと。

      customErrorsタグ
      http://msdn2.microsoft.com/ja-jp/library/h0hfz6fc.aspx
      http://msdn2.microsoft.com/ja-jp/library/h0hfz6fc(VS.80).aspx
      
      errorタグ
      http://msdn2.microsoft.com/ja-jp/library/s2f4e3e7.aspx
      http://msdn2.microsoft.com/ja-jp/library/s2f4e3e7(VS.80).aspx

    -->
    <!-- 
      ASP.NETの処理方法、実行時設定をする。
           
      maxRequestLength：POSTデータの最大値（既定値は 4,096 KB (4 MB)）
      executionTimeout：POST処理の実行タイムアウトを設定（既定値は 90 秒）

      詳細は、下記URLを参照のこと。
      http://msdn2.microsoft.com/ja-jp/library/e1f13641.aspx
      http://msdn2.microsoft.com/ja-jp/library/e1f13641(VS.80).aspx
    -->
    <httpRuntime maxRequestLength="4096" executionTimeout="90"/>
  </system.web>
  <!--
    10 行でズバリ!! サービスの起動の自動化 (WCF の IIS ホスティング) (C#) 言語 C#
    http://code.msdn.microsoft.com/windowsdesktop/10-WCF-IIS-C-d21eddb5
     構成ファイル (Web.config) を下記の通り記述すると、BasicHttpBinding を使用した簡易なサービスとして公開できます。
  -->
  <!--system.serviceModel>
    <behaviors>
      <serviceBehaviors>
        <behavior name="">
          <serviceMetadata httpGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="false" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <serviceHostingEnvironment multipleSiteBindingsEnabled="true" />
  </system.serviceModel-->
  <!--bindingを指定して公開する場合↓。-->
  <system.serviceModel>
    <services>
      <service behaviorConfiguration="WCFHTTPSvcForFx" name="Touryo.Infrastructure.Framework.ServiceInterface.ASPNETWebService.WCFHTTPSvcForFx">
        <endpoint address="" binding="basicHttpBinding" contract="Touryo.Infrastructure.Framework.ServiceInterface.ASPNETWebService.IWCFHTTPSvcForFx"/>
      </service>
    </services>
    <behaviors>
      <serviceBehaviors>
        <behavior name="WCFHTTPSvcForFx">
          <serviceMetadata httpGetEnabled="true"/>
          <serviceDebug includeExceptionDetailInFaults="false"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <serviceHostingEnvironment multipleSiteBindingsEnabled="true"/>
  </system.serviceModel>
</configuration>