<?xml version="1.0"?>
<!-- 
    メモ: このファイルを手動で編集する代わりに、Web 管理ツールを使用 
    してアプリケーションの設定を構成することができます。Visual Studio 
    の [Web サイト] メニューにある [ASP.NET 構成] オプションから設定
    を行ってください。設定およびコマンドの一覧は、通常
    \Windows\Microsoft.Net\Framework\v2.x\Config にある
    machine.config.comments で確認できます。
-->
<configuration>
  <!-- appSettingsの設定 -->
  <appSettings file="app.config"></appSettings>
  <!-- connectionStringsの設定 -->
  <connectionStrings>
    <!-- SQL Server / SQL Client用 -->
    <add name="ConnectionString_SQL" connectionString="Data Source=localhost\sqlexpress;Initial Catalog=Northwind;Integrated Security=True;"/>
  </connectionStrings>
  <!-- ASP.NETのパラメータ -->
  <system.web>
    <!-- 
			デバッグ シンボルをコンパイルされたページに挿入
			するには、compilation debug="true" に設定します。
			この設定はパフォーマンスに影響するため、
			開発時のみこの値をtrue に設定してください。
			
			詳細は、下記URLを参照のこと。
			http://msdn2.microsoft.com/ja-jp/library/s10awwz0.aspx
			http://msdn2.microsoft.com/ja-jp/library/s10awwz0(VS.80).aspx
		-->
    <!-- リリース時は、debug="false"に変更してください。 -->
    <compilation debug="true" targetFramework="4.6" />
    
    <!--
			グローバリゼーション
			
			globalization 要素
			http://msdn2.microsoft.com/ja-jp/library/hy4kkhe0.aspx
			http://msdn2.microsoft.com/ja-jp/library/hy4kkhe0(VS.80).aspx
					 
			CultureInfo クラス
			http://msdn2.microsoft.com/ja-jp/library/system.globalization.cultureinfo.aspx
			http://msdn2.microsoft.com/ja-jp/library/system.globalization.cultureinfo(VS.80).aspx

			CultureInfo("ja")　と　CultureInfo("ja-JP") の違い
			http://blogs.wankuma.com/ogiogi/archive/2007/12/10/112403.aspx
		-->
    <globalization requestEncoding="utf-8" responseEncoding="utf-8" responseHeaderEncoding="utf-8" culture="ja-JP" uiCulture="ja-JP"/>
    <!--
			セッションの設定
			
			本設定のパラメタは、別途検討すること。
			属性                          :目的
			timeout                       :セッション状態プロバイダがセッションを終了するまでに、要求間で許容される時間 (分単位) を設定する。
			cookieless                    :セッションIDをURLに埋め込む（true）か、cookie に格納する（false）かを設定する。
			mode                          :現在のセッション状態モードを設定する。
			
			詳細は、下記URLを参照のこと。
			http://msdn2.microsoft.com/ja-jp/library/h6bb9cz9.aspx
			http://msdn2.microsoft.com/ja-jp/library/h6bb9cz9(VS.80).aspx
		-->
    <!-- インプロセス -->
    <!--sessionState timeout="20" cookieless="false" mode="InProc"></sessionState-->
    <!--
			ステートサーバ（利用の際は、管理ツール「サービス」から、ASP.NET 状態サービスを開始しておくこと。）
			開発フェーズでステートサーバを選択しておけば、本番環境は、どのモードにも対応できる。
		-->
    <sessionState timeout="20" cookieless="false" mode="StateServer" stateConnectionString="tcpip=127.0.0.1:42424"/>
    <!--
			SQLサーバ（利用の際は、以下のスクリプトを実行する）
			C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727
			・InstallSqlState.sql（UninstallSqlState.sql）
			・InstallPersistSqlState.sql（UninstallPersistSqlState.sql）
					 
			[HOWTO] SQL Server で ASP.NET セッション状態管理を構成する方法
			http://support.microsoft.com/kb/317604/ja
					 
			※ Express Editionは、SQL Server 2005以降、SQL Serverエージェントを搭載しないので利用できない。
		-->
    <!--sessionState timeout="20" cookieless="false" mode="SQLServer" 
					  sqlConnectionString="Data Source=xxx.xxx.xxx.xxx;User ID=xxx;Password=xxx;"/-->
    <!--
			Oracleサーバ（利用の際は、以下のスクリプトを実行する）					 
			C:\app\Administrator\product\11.1.0\client_1\ASP.NET\SQL
			・InstallOracleSessionState.sql(UninstallOracleSessionState.sql)
			・InstallOracleSessionState92.sql(UninstallOracleSessionState92.sql)

			Oracle Providers for ASP.NET開発者ガイド > Oracle Providers for ASP.NETのインストール
			http://otndnld.oracle.co.jp/document/products/oracle11g/111/windows/E06106-01/IntroInstallation.htm
					 
			Oracle Providers for ASP.NET開発者ガイド > OracleSessionStateStoreクラス
			http://otndnld.oracle.co.jp/document/products/oracle11g/111/windows/E06106-01/OracleSessionStateStoreClass.htm
		-->
    <!--sessionState timeout="20" cookieless="false" mode="Custom" customProvider="MyOracleSessionStateStore">
			<providers>
				<add name="MyOracleSessionStateStore"
					 type="Oracle.Web.SessionState.OracleSessionStateStore, 
					       Oracle.Web, Version=2.111.6.20, Culture=neutral, 
						   PublicKeyToken=89b483f429c47342"
						   connectionStringName="ConnectionString_ODP2"/>
			</providers>
		</sessionState-->

    <!-- 偽装する場合は以下を有効にする -->
    <!-- identity impersonate="true" userName="xxxx" password="xxxx" / -->
    <!-- 
			ASP.NETの処理方法、実行時設定をする。
					 
			maxRequestLength：POSTデータの最大値（既定値は 4,096 KB (4 MB)）
			executionTimeout：POST処理の実行タイムアウトを設定（既定値は 90 秒）

			詳細は、下記URLを参照のこと。
			http://msdn2.microsoft.com/ja-jp/library/e1f13641.aspx
			http://msdn2.microsoft.com/ja-jp/library/e1f13641(VS.80).aspx
		-->
    <httpRuntime maxRequestLength="4096" executionTimeout="90"/>
  </system.web>
  <system.serviceModel>
    <services>
      <service name="Touryo.Infrastructure.Framework.ServiceInterface.WCFWebService.ServiceForRt">
        <endpoint address="" binding="webHttpBinding" behaviorConfiguration="RestBehavior"
                  contract="Touryo.Infrastructure.Framework.ServiceInterface.WCFWebService.IServiceForRt" />
      </service>
    </services>
    <behaviors>
      <endpointBehaviors>
        <behavior name="RestBehavior">
          <webHttp />
        </behavior>
      </endpointBehaviors>
      <serviceBehaviors>
        <behavior name="">
          <serviceMetadata httpGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="false" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <serviceHostingEnvironment multipleSiteBindingsEnabled="true" />
  </system.serviceModel>
</configuration>
