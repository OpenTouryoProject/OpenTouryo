@model MVC_Sample.Models.CrudModel
@using Touryo.Infrastructure.Public.Util
@{
    // ページタイトル
    ViewBag.Title = "CRUDサンプル（Html.BeginForm）";

    // マスターページ
    Layout = "~/Views/Shared/_CrudSampleLayout.cshtml";
}

@* 本文レイアウト（RenderBodyに出力されます） *@
@* Html.BeginFormは従来の全体方式、Ajax.BeginFormは部分更新方式（UpdateTargetIdの範囲を部分更新） *@
@using (Html.BeginForm(null, "CrudMu2", FormMethod.Post, new { id = "form1" }))
{
    <table style="width:100%; height:100%; border: none">
        <!-- データプロバイダ -->
        <tr>
            <td colspan="5">データアクセス制御クラス（データプロバイダ）を選択</td>
            <td colspan="5" rowspan="15" style="height: 100%">
                <div id="chartResult" style="width: 100%; height: 100%;">@Html.Partial("_ChartView")</div>
            </td>
        </tr>
        <tr>
            <td colspan="5">
                @* HTMLヘルパー（Html.DropDownListメソッド → selectタグを生成する） *@
                @Html.DropDownList("ddlDap", Model.DdlDapItems, new { style = "width: 100%" })
            </td>
        </tr>

        <!-- クエリ モード -->
        <tr>
            <td colspan="5">静的、動的のクエリ モードを選択（共通Dao選択時）</td>
        </tr>
        <tr>
            <td colspan="5">
                @* HTMLヘルパー（Html.DropDownListメソッド → selectタグを生成する） *@
                @Html.DropDownList("ddlMode1", Model.DdlMode1Items, new { style = "width: 100%" })
            </td>
        </tr>

        <!-- クエリ モード -->
        <tr>
            <td colspan="5">静的、動的のクエリ モードを選択</td>
        </tr>
        <tr>
            <td colspan="5">
                @* HTMLヘルパー（Html.DropDownListメソッド → selectタグを生成する） *@
                @Html.DropDownList("ddlMode2", Model.DdlMode2Items, new { style = "width: 100%" })
            </td>
        </tr>

        <!-- 分離レベル -->
        <tr>
            <td colspan="5">分離レベルを選択</td>
        </tr>
        <tr>
            <td colspan="5">
                @* HTMLヘルパー（Html.DropDownListメソッド → selectタグを生成する） *@
                @Html.DropDownList("ddlIso", Model.DdlIsoItems, new { style = "width: 100%", disabled = "disabled" })
            </td>
        </tr>

        <!-- コミット、ロールバック -->
        <tr>
            <td colspan="5">コミット、ロールバックを設定（例外発生時、ロールバック）</td>
        </tr>
        <tr>
            <td colspan="5">
                @* HTMLヘルパー（Html.DropDownListメソッド → selectタグを生成する） *@
                @Html.DropDownList("ddlExRollback", Model.DdlExRollbackItems, new { style = "width: 100%" })
            </td>
        </tr>

        <!-- 通信制御 -->
        <tr>
            <td colspan="5">通信制御</td>
        </tr>
        <tr>
            <td colspan="5">
                @* HTMLヘルパー（Html.DropDownListメソッド → selectタグを生成する） *@
                @Html.DropDownList("ddlTransmission", Model.DdlTransmissionItems, new { style = "width: 100%", disabled = "disabled" })
            </td>
        </tr>

        <!-- 明細 -->
        <tr>
            <td colspan="2">ShipperID：</td>
            <td colspan="3">
                @* HTMLヘルパー（Html.TextBoxメソッド → input type="text"タグを生成する） *@
                @Html.TextBox("textBox1", Model.InputValues == null ? null : Model.InputValues["textBox1"], new { style = "width: 100%" })
            </td>
        </tr>
        <tr>
            <td colspan="2">CompanyName：</td>
            <td colspan="3">
                @* HTMLヘルパー（Html.TextBoxメソッド → input type="text"タグを生成する） *@
                @Html.TextBox("textBox2", Model.InputValues == null ? null : Model.InputValues["textBox2"], new { style = "width: 100%" })
            </td>
        </tr>
        <tr>
            <td colspan="2">Phone：</td>
            <td colspan="3">
                @* HTMLヘルパー（Html.TextBoxメソッド → input type="text"タグを生成する） *@
                @Html.TextBox("textBox3", Model.InputValues == null ? null : Model.InputValues["textBox3"], new { style = "width: 100%" })
            </td>
        </tr>

        <!-- 並び替え対象列 -->
        <tr>
            <td colspan="2">並び替え対象列</td>
            <td colspan="3">
                @* HTMLヘルパー（Html.DropDownListメソッド → selectタグを生成する） *@
                @Html.DropDownList("ddlOrderColumn", Model.DdlOrderColumnItems, new { style = "width: 100%" })
            </td>
            <td colspan="5"><button id="button11" style="width: 100%">クリア</button></td>
        </tr>

        <!-- 昇順・降順 -->
        <tr>
            <td colspan="2">昇順・降順</td>
            <td colspan="3">
                @* HTMLヘルパー（Html.DropDownListメソッド → selectタグを生成する） *@
                @Html.DropDownList("ddlOrderSequence", Model.DdlOrderSequenceItems, new { style = "width: 100%" })
            </td>
        </tr>

        <!-- 処理結果 -->
        <tr>
            <td colspan="2">処理結果：</td>
            <td colspan="3">
                <div id="messageResult">
                    @* HTMLヘルパー（Html.Partialメソッド → 部分viewで、部分更新されるエリア） *@
                    @Html.Partial("_MessageView")
                </div>
            </td>
        </tr>

        <!-- ボタン -->
        <tr>
            <td colspan="2"><button id="button1" style="width: 100%">件数取得</button></td>
            <td colspan="2"><button id="button2" style="width: 100%">一覧取得（dt）</button></td>
            <td colspan="2"><button id="button3" style="width: 100%">一覧取得（ds）</button></td>
            <td colspan="2"><button id="button4" style="width: 100%">一覧取得（dr）</button></td>
            <td colspan="2"><button id="button5" style="width: 100%">一覧取得（動的SQL）</button></td>
        </tr>
        <tr>
            <td colspan="2"><button id="button6" style="width: 100%">一件参照</button></td>
            <td colspan="2"><button id="button7" style="width: 100%">追加</button></td>
            <td colspan="2"><button id="button8" style="width: 100%">更新</button></td>
            <td colspan="2"><button id="button9" style="width: 100%">削除</button></td>
            <td colspan="2"></td>
        </tr>
        <tr>
            <td colspan="10"><label id="lblErrorMessage"></label></td>
        </tr>
        <tr>
            <td colspan="10"><button id="button21" style="width: 100%">（ポスト後）画面遷移（リダイレクト）</button></td>
        </tr>
        <tr>
            <td colspan="10"><button id="button22" style="width: 100%">二重送信防止</button></td>
        </tr>
    </table>
}

@* スクリプト・セクション（RenderSection("scripts", required: false)に出力されます） *@
@section scripts{
<script type="text/javascript">

    $(function () {
        $('#button1').click(function () {
            // button1 の場合は、GetCountのActionを実行しメッセージ部分を更新する
            $('#form1').attr('action', '@Url.Action("GetCount")');
            $('#form1').submit();

            // サブミットが 2 回発生しないよう、false を返す
            return false;
        });

        $('#button2').click(function () {
            // button2 の場合は、SelectAll_DTのActionを実行し表部分を更新する
            $('#form1').attr('action', '@Url.Action("SelectAll_DT")');
            $('#form1').submit();

            // サブミットが 2 回発生しないよう、false を返す
            return false;
        });

        $('#button3').click(function () {
            // button3 の場合は、SelectAll_DSのActionを実行し表部分を更新する
            $('#form1').attr('action', '@Url.Action("SelectAll_DS")');
            $('#form1').submit();

            // サブミットが 2 回発生しないよう、false を返す
            return false;
        });

        $('#button4').click(function () {
            // button4 の場合は、SelectAll_DRのActionを実行し表部分を更新する
            $('#form1').attr('action', '@Url.Action("SelectAll_DR")');
            $('#form1').submit();

            // サブミットが 2 回発生しないよう、false を返す
            return false;
        });

        $('#button5').click(function () {
            // button5 の場合は、SelectAll_DSQLのActionを実行し表部分を更新する
            $('#form1').attr('action', '@Url.Action("SelectAll_DSQL")');
            $('#form1').submit();

            // サブミットが 2 回発生しないよう、false を返す
            return false;
        });

        $('#button6').click(function () {
            // button6 の場合は、SelectのActionを実行しメッセージ部分を更新する
            $('#form1').attr('action', '@Url.Action("Select")');
            $('#form1').submit();

            // サブミットが 2 回発生しないよう、false を返す
            return false;
        });

        $('#button7').click(function () {
            // button7 の場合は、InsertのActionを実行しメッセージ部分を更新する
            $('#form1').attr('action', '@Url.Action("Insert")');
            $('#form1').submit();

            // サブミットが 2 回発生しないよう、false を返す
            return false;
        });

        $('#button8').click(function () {
            // button8 の場合は、UpdateのActionを実行しメッセージ部分を更新する
            $('#form1').attr('action', '@Url.Action("Update")');
            $('#form1').submit();

            // サブミットが 2 回発生しないよう、false を返す
            return false;
        });

        $('#button9').click(function () {
            // button9 の場合は、DeleteのActionを実行しメッセージ部分を更新する
            $('#form1').attr('action', '@Url.Action("Delete")');
            $('#form1').submit();

            // サブミットが 2 回発生しないよう、false を返す
            return false;
        });

        $('#button21').click(function () {
            // button21 の場合は、TransitionsのActionを実行し画面遷移する
            $('#form1').attr('action', '@Url.Action("Transitions")');
            $('#form1').submit();

            // サブミットが 2 回発生しないよう、false を返す
            return false;
        });

        $('#button22').click(function () {
            // button22 の場合は、PreventDoubleSubmissionを実行し二重送信防止機能をテストする
            $('#form1').attr('action', '@Url.Action("PreventDoubleSubmission")');
            $('#form1').submit();

            // サブミットが 2 回発生しないよう、false を返す
            return false;
        });

        // Html.BeginFormの時は二重送信防止機能を組込む為にこの実装を追記する。
        $("form").live("submit", function () {
            return Fx_OnSubmit();
        });    
    });
</script>
}
