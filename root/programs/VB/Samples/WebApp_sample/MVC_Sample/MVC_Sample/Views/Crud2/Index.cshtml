@*
    //**********************************************************************************
    //* サンプル アプリ・モデル
    //**********************************************************************************

    // テスト用クラスなので、必要に応じて流用 or 削除して下さい。

    //**********************************************************************************
    //* クラス名        ：Index
    //* クラス日本語名  ：CRUDサンプル（Ajax.BeginForm）
    //*
    //* 作成日時        ：－
    //* 作成者          ：－
    //* 更新履歴        ：－
    //*
    //*  日時        更新者            内容
    //*  ----------  ----------------  -------------------------------------------------
    //*  20xx/xx/xx  ＸＸ ＸＸ         ＸＸＸＸ
    //**********************************************************************************
*@

@using MVC_Sample.Models.ViewModels
@model CrudViweModel

@{
    // ページタイトル
    ViewBag.Title = "CRUDサンプル（Ajax.BeginForm）";

    // マスターページ
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@* スクリプト・セクション（RenderSection("HeaderScriptsSection", required: true)に出力されます） *@
@section HeaderScriptsSection{
    <!-- Head 部の section -->
}

@* 本文レイアウト（RenderBodyに出力されます） *@
@* Html.BeginFormは従来の全体方式、Ajax.BeginFormは部分更新方式（UpdateTargetIdの範囲を部分更新） *@
@using (Ajax.BeginForm(null, null,
    new AjaxOptions() { HttpMethod = "POST", UpdateTargetId = "messageResult" }, new { id = "form1" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-inline">
        <div class="form-group">
            <span>データアクセス制御クラス（データプロバイダ）を選択</span><br />
            @Html.DropDownListFor(model => model.DdlDap, Model.DdlDapItems)<br />

            <span>個別、共通、自動生成のＤａｏ種別</span><br />
            @Html.DropDownListFor(model => model.DdlMode1, Model.DdlMode1Items)<br />

            <span>静的、動的のクエリ モードを選択</span><br />
            @Html.DropDownListFor(model => model.DdlMode2, Model.DdlMode2Items)<br />

            <span>分離レベルを選択</span><br />
            @Html.DropDownListFor(model => model.DdlIso, Model.DdlIsoItems)<br />

            <span>コミット、ロールバックを設定（例外発生時、ロールバック）</span><br />
            @Html.DropDownListFor(model => model.DdlExRollback, Model.DdlExRollbackItems)<br />

            <span>ShipperID：</span><br />
            @Html.TextBoxFor(model => model.ShipperID)<br />

            <span>CompanyName：</span><br />
            @Html.TextBoxFor(model => model.CompanyName)<br />

            <span>Phone：</span><br />
            @Html.TextBoxFor(model => model.Phone)<br />

            <span>並び替え対象列</span><br />
            @Html.DropDownListFor(model => model.DdlOrderColumn, Model.DdlOrderColumnItems)<br />

            <span>昇順・降順</span>
            @Html.DropDownListFor(model => model.DdlOrderSequence, Model.DdlOrderSequenceItems)

            <span>処理結果：</span>
            <div id="messageResult">@Html.Partial("_MessageView")</div>
        </div>
        <div class="form-group">
            <div id="chartResult" style="width: 100%; height: 100%;">@Html.Partial("_ChartView")</div>
            <button id="button10">クリア</button>
        </div>
    </div>
    <div class="form-inline">
        <div class="form-group">
            <button id="button1">件数取得</button>
            <button id="button2">一覧取得（dt）</button>
            <button id="button3">一覧取得（ds）</button>
            <button id="button4">一覧取得（dr）</button>
            <button id="button5">一覧取得（動的SQL）</button>
        </div><br />
        <div class="form-group">

            <button id="button6">一件参照</button>
            <button id="button7">追加</button>
            <button id="button8">更新</button>
            <button id="button9">削除</button>
        </div><br />
        <div class="form-group">
            <label id="lblErrorMessage"></label>
            <button id="button21">二重送信防止</button>
            <button id="button22">画面遷移（ポストバック後リダイレクト）</button>
        </div>
    </div>
}

@* スクリプト・セクション（RenderSection("FooterScriptsSection", required: true)に出力されます） *@
@section FooterScriptsSection{

    <script type="text/javascript">
        $(function () {
            $('#button1').click(function () {
                // button1 の場合は、GetCountのActionを実行しメッセージ部分を更新する
                $('#form1').attr('data-ajax-update', '#messageResult');
                $('#form1').attr('action', '@Url.Action("SelectCount")');

                // If prevent double submission in Ajax.BeginForm(), then sets this flag to true.
                // Ajax.BeginForm() で二重送信を防止する場合は、このフラグをtrueに設定します。
                PreventAjaxDoubleSubmit = true;

                $('#form1').submit();

                // サブミットが 2 回発生しないよう、false を返す
                return false;
            });

            $('#button2').click(function () {
                // button2 の場合は、SelectAll_DTのActionを実行し表部分を更新する
                $('#form1').attr('data-ajax-update', '#chartResult');
                $('#form1').attr('action', '@Url.Action("SelectAll_DT")');
                $('#form1').submit();

                // サブミットが 2 回発生しないよう、false を返す
                return false;
            });

            $('#button3').click(function () {
                // button3 の場合は、SelectAll_DSのActionを実行し表部分を更新する
                $('#form1').attr('data-ajax-update', '#chartResult');
                $('#form1').attr('action', '@Url.Action("SelectAll_DS")');
                $('#form1').submit();

                // サブミットが 2 回発生しないよう、false を返す
                return false;
            });

            $('#button4').click(function () {
                // button4 の場合は、SelectAll_DRのActionを実行し表部分を更新する
                $('#form1').attr('data-ajax-update', '#chartResult');
                $('#form1').attr('action', '@Url.Action("SelectAll_DR")');
                $('#form1').submit();

                // サブミットが 2 回発生しないよう、false を返す
                return false;
            });

            $('#button5').click(function () {
                // button5 の場合は、SelectAll_DSQLのActionを実行し表部分を更新する
                $('#form1').attr('data-ajax-update', '#chartResult');
                $('#form1').attr('action', '@Url.Action("SelectAll_DSQL")');
                $('#form1').submit();

                // サブミットが 2 回発生しないよう、false を返す
                return false;
            });

            $('#button6').click(function () {
                // button6 の場合は、SelectのActionを実行しメッセージ部分を更新する
                $('#form1').attr('data-ajax-update', '#messageResult');
                $('#form1').attr('action', '@Url.Action("Select")');
                $('#form1').submit();

                // サブミットが 2 回発生しないよう、false を返す
                return false;
            });

            $('#button7').click(function () {
                // button7 の場合は、InsertのActionを実行しメッセージ部分を更新する
                $('#form1').attr('data-ajax-update', '#messageResult');
                $('#form1').attr('action', '@Url.Action("Insert")');
                $('#form1').submit();

                // サブミットが 2 回発生しないよう、false を返す
                return false;
            });

            $('#button8').click(function () {
                // button8 の場合は、UpdateのActionを実行しメッセージ部分を更新する
                $('#form1').attr('data-ajax-update', '#messageResult');
                $('#form1').attr('action', '@Url.Action("Update")');
                $('#form1').submit();

                // サブミットが 2 回発生しないよう、false を返す
                return false;
            });

            $('#button9').click(function () {
                // button9 の場合は、DeleteのActionを実行しメッセージ部分を更新する
                $('#form1').attr('data-ajax-update', '#messageResult');
                $('#form1').attr('action', '@Url.Action("Delete")');
                $('#form1').submit();

                // サブミットが 2 回発生しないよう、false を返す
                return false;
            });

            $('#button10').click(function () {
                // 結果をクリアする
                $('#chartResult').html('');

                // Form をサブミットしないよう、false を返す
                return false;
            });

            $('#button21').click(function () {
                // button22 の場合は、PreventDoubleSubmissionを実行し二重送信防止機能をテストする
                $('#form1').attr('data-ajax-update', '#messageResult');
                $('#form1').attr('action', '@Url.Action("PreventDoubleSubmission")');

                // If prevent double submission in Ajax.BeginForm(), then sets this flag to true.
                // Ajax.BeginForm() で二重送信を防止する場合は、このフラグをtrueに設定します。
                PreventAjaxDoubleSubmit = true;

                $('#form1').submit();

                // サブミットが 2 回発生しないよう、false を返す
                return false;
            });

            $('#button22').click(function () {
                // button21 の場合は、TransitionsのActionを実行し画面遷移する
                $('#form1').attr('action', '@Url.Action("Transitions")');
                $('#form1').submit();

                // サブミットが 2 回発生しないよう、false を返す
                return false;
            });
        });
    </script>
}
