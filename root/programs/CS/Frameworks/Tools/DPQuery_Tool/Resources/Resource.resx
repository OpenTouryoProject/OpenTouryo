<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClosingProcess" xml:space="preserve">
    <value>Closing process</value>
  </data>
  <data name="EntryPoint" xml:space="preserve">
    <value>Entry point : {0}</value>
  </data>
  <data name="LogOutputText" xml:space="preserve">
    <value>"[Log output text]"</value>
  </data>
  <data name="MSG_CONFIG_FILE_NOT_EXIST" xml:space="preserve">
    <value>There was no saved configuration file.</value>
  </data>
  <data name="MSG_EXEC_DQP" xml:space="preserve">
    <value>Dynamic parameterized query was executed.</value>
  </data>
  <data name="MSG_EXEC_SPQ" xml:space="preserve">
    <value>Static parameterized query was executed.</value>
  </data>
  <data name="MSG_INPUT_IP" xml:space="preserve">
    <value>Enter the IP address of the database server</value>
  </data>
  <data name="MSG_INPUT_PWD" xml:space="preserve">
    <value>Enter the login account to the database: Password</value>
  </data>
  <data name="MSG_INPUT_UID" xml:space="preserve">
    <value>Enter the login account to the database: User ID</value>
  </data>
  <data name="MSG_IS_QUERY_FILE_SAVED" xml:space="preserve">
    <value>Are you sure you want to save this query file?</value>
  </data>
  <data name="Nocolumns" xml:space="preserve">
    <value>There were no columns available to generate screens.</value>
  </data>
  <data name="PerformanceExecution" xml:space="preserve">
    <value>[Performance information - execution process]</value>
  </data>
  <data name="PKnotAvailable" xml:space="preserve">
    <value>Primary Keys were not set to the table :</value>
  </data>
  <data name="PkSetMessgae" xml:space="preserve">
    <value>Please check Primary Keys were set to the Table or not.</value>
  </data>
  <data name="Result" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="RunFile" xml:space="preserve">
    <value>Run from a file</value>
  </data>
  <data name="RunTextBox" xml:space="preserve">
    <value>Run from TextBox</value>
  </data>
  <data name="ScreenGenerationSuccess" xml:space="preserve">
    <value>The screens were generated automatically.</value>
  </data>
  <data name="STATUS_AUTO_MODE_WAS_SELECTED" xml:space="preserve">
    <value>Automatic control (Ran with auto-commit transaction mode.)</value>
  </data>
  <data name="STATUS_CONFIGURATION_LOADED" xml:space="preserve">
    <value>Configured connection setting was loaded.</value>
  </data>
  <data name="STATUS_CONFIGURATION_SAVED" xml:space="preserve">
    <value>Configured connection setting was saved.</value>
  </data>
  <data name="STATUS_CONNECTION_CLOSED" xml:space="preserve">
    <value>Connection was closed.</value>
  </data>
  <data name="STATUS_CONNECTION_OPENED" xml:space="preserve">
    <value>Connection was opened.</value>
  </data>
  <data name="STATUS_CREATE_CONFIGURATION" xml:space="preserve">
    <value>Configured a new connection string setting.</value>
  </data>
  <data name="STATUS_INIT" xml:space="preserve">
    <value>Initial state</value>
  </data>
  <data name="STATUS_MANUAL_MODE_WAS_SELECTED" xml:space="preserve">
    <value>Manual control (Manually control the transaction using this button.)</value>
  </data>
  <data name="STATUS_PROC_CANCELED" xml:space="preserve">
    <value>Operation was canceled.</value>
  </data>
  <data name="STATUS_QUERY_EXECED" xml:space="preserve">
    <value>Query was executed.</value>
  </data>
  <data name="STATUS_QUERY_FILE_CLOSED" xml:space="preserve">
    <value>Query file was closed.</value>
  </data>
  <data name="STATUS_QUERY_FILE_OPENED" xml:space="preserve">
    <value>Query file was opened.</value>
  </data>
  <data name="STATUS_QUERY_FILE_OVERWRITED" xml:space="preserve">
    <value>Modified query was saved to the query file.</value>
  </data>
  <data name="STATUS_QUERY_FILE_SAVED" xml:space="preserve">
    <value>Query has been saved to a new query file.</value>
  </data>
  <data name="STATUS_TRANSACTION_COMMITED" xml:space="preserve">
    <value>Transaction was committed.</value>
  </data>
  <data name="STATUS_TRANSACTION_ROLLBACKED" xml:space="preserve">
    <value>Transaction was rolled back.</value>
  </data>
  <data name="STATUS_TRANSACTION_STARTED" xml:space="preserve">
    <value>Transaction was started.</value>
  </data>
  <data name="AppConfigParameterNotSet" xml:space="preserve">
    <value>app.Config parameter has not been set. :</value>
  </data>
  <data name="CheckExceptionError" xml:space="preserve">
    <value>Check Error was : {0}</value>
  </data>
  <data name="EscCharacterNotSet" xml:space="preserve">
    <value>Escape character was not set.</value>
  </data>
  <data name="FileFormatError" xml:space="preserve">
    <value>Data tier definition information file format error : There was no table name.</value>
  </data>
  <data name="FileGenComplete" xml:space="preserve">
    <value>Automatic Generation Completed !</value>
  </data>
  <data name="FilenotExistDBtypeInfo" xml:space="preserve">
    <value>Check error: Database type information file [{0}] does not exist.</value>
  </data>
  <data name="FilenotExistDlayerInfo" xml:space="preserve">
    <value>Check error: Data tier definition information file [{0}] does not exist.</value>
  </data>
  <data name="FilenotExistNETtypeInfo" xml:space="preserve">
    <value>Check error: .NET type information file [{0}] does not exist.</value>
  </data>
  <data name="InputFileRootFolderNotExist" xml:space="preserve">
    <value>Root folder of the input file (template file) does not exist.</value>
  </data>
  <data name="InvalidFormat" xml:space="preserve">
    <value>Invalid Format</value>
  </data>
  <data name="NoTimestampColName" xml:space="preserve">
    <value>There was no time stamp column name.</value>
  </data>
  <data name="OpenFileDialogFilter" xml:space="preserve">
    <value>CSV file (*.csv)|*.csv</value>
  </data>
  <data name="OpenFileDialogTitle" xml:space="preserve">
    <value>Data tier definition information file.</value>
  </data>
  <data name="OutputFileRootFolderNotExist" xml:space="preserve">
    <value>Root folder (Dao class file, SQL file. Etc) of the output file does not exist.</value>
  </data>
  <data name="OutputFolderPath" xml:space="preserve">
    <value>Specifies the root folder path (Dao file, SQL file) of the output file</value>
  </data>
  <data name="PrimaryKeyNotDefined" xml:space="preserve">
    <value>Primary key was not defined in the table.</value>
  </data>
  <data name="RuntimeError" xml:space="preserve">
    <value>Is a run-time error : {0}</value>
  </data>
  <data name="StringIndentation" xml:space="preserve">
    <value>Before [{0}], only indent can be specified. : {1}</value>
  </data>
  <data name="TempFilenotExists" xml:space="preserve">
    <value>Template file does not exist. :</value>
  </data>
  <data name="TemplateFolderPath" xml:space="preserve">
    <value>Specifies the root folder path of the input file (template file).</value>
  </data>
  <data name="STATUS_DATA_PROVIDER_SELECTED" xml:space="preserve">
    <value>The {0} data provider was selected.</value>
  </data>
</root>