<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CautionPrerequisite" xml:space="preserve">
    <value>Do not have more than one table with the same name on the same DB ( the specification for the Data layer generator for {0}) </value>
  </data>
  <data name="CautionPrerequisiteCaption" xml:space="preserve">
    <value>Note - ( prerequisite ) </value>
  </data>
  <data name="CautionPrerequisiteOracle" xml:space="preserve">
    <value>(Is the specification of Data layer generator for Oracle ) that we only consider the table owned by the ( user ) schema [{0}]</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirmation</value>
  </data>
  <data name="DisplaySchemaInfoDialogBox" xml:space="preserve">
    <value>Display ({0}) dialog of schema information of DBMS</value>
  </data>
  <data name="GotoNextTable" xml:space="preserve">
    <value>Go to the next table.</value>
  </data>
  <data name="MetadataInfo" xml:space="preserve">
    <value>Meta-Data Information</value>
  </data>
  <data name="ReservedWordInfo" xml:space="preserve">
    <value>Reserved Word Information</value>
  </data>
  <data name="RestrictionInfo" xml:space="preserve">
    <value>Restriction Information</value>
  </data>
  <data name="SaveFileDialogFilter" xml:space="preserve">
    <value>CSV file (*.csv)|*.csv</value>
  </data>
  <data name="SaveFileDialogTitle" xml:space="preserve">
    <value>Data layer definition information file</value>
  </data>
  <data name="SetPrimaryKeyInfo" xml:space="preserve">
    <value>Setting the primary key information ({0}) dialog</value>
  </data>
  <data name="SummaryInfo" xml:space="preserve">
    <value>Summary Information</value>
  </data>
  <data name="TableNameColDbTypeInfo" xml:space="preserve">
    <value>Table name, column DB-type information</value>
  </data>
  <data name="TableNameColdotNetTypeInfo" xml:space="preserve">
    <value>Table name, column. NET type information -</value>
  </data>
  <data name="TableNameColInfo" xml:space="preserve">
    <value>Table name, column information -</value>
  </data>
  <data name="TypeInfo" xml:space="preserve">
    <value>Type Information</value>
  </data>
  <data name="DlayerGeneratedMessage" xml:space="preserve">
    <value>Completion of generation of the Data layer definition information!</value>
  </data>
  <data name="TabPage1" xml:space="preserve">
    <value>Tab 1</value>
  </data>
  <data name="TabPage1ColumnInfo" xml:space="preserve">
    <value>Column Information</value>
  </data>
  <data name="TabPage1SchemaInfo" xml:space="preserve">
    <value>Schema Information</value>
  </data>
  <data name="TabPage1TableInfo" xml:space="preserve">
    <value>Table Information</value>
  </data>
  <data name="TabPage2" xml:space="preserve">
    <value>Tab 2</value>
  </data>
  <data name="TabPage2PrimarykeyInfo" xml:space="preserve">
    <value>Primary Key Information</value>
  </data>
  <data name="TabPage2VieuxInfo" xml:space="preserve">
    <value>Vieux Information</value>
  </data>
  <data name="TabPage3" xml:space="preserve">
    <value>Tab 3</value>
  </data>
  <data name="TabPage3IndexColInfo" xml:space="preserve">
    <value>Index Column Information</value>
  </data>
  <data name="EntryPoint" xml:space="preserve">
    <value>Entry Point:</value>
  </data>
  <data name="AppConfigParameterNotSet" xml:space="preserve">
    <value>app.Config parameter has not been set. :</value>
  </data>
  <data name="CheckExceptionError" xml:space="preserve">
    <value>Check Error is :</value>
  </data>
  <data name="EscCharacterNotSet" xml:space="preserve">
    <value>Escape character is not set.</value>
  </data>
  <data name="FileFormatError" xml:space="preserve">
    <value>Data layer definition information file format error : There is no table name.</value>
  </data>
  <data name="FileGenComplete" xml:space="preserve">
    <value>Automatic Generation Completed !</value>
  </data>
  <data name="FilenotExistDBtypeInfo" xml:space="preserve">
    <value>Check error: file type information DB [{0}] does not exist.</value>
  </data>
  <data name="FilenotExistDlayerInfo" xml:space="preserve">
    <value>Check error:Defined Data layer Information file  defined  [{0}] does not exist.</value>
  </data>
  <data name="FilenotExistNETtypeInfo" xml:space="preserve">
    <value>Check error:. NET type information file [{0}] does not exist.</value>
  </data>
  <data name="InputFileRootFolderNotExist" xml:space="preserve">
    <value>Root folder of the input file (template file) does not exist.</value>
  </data>
  <data name="InvalidFormat" xml:space="preserve">
    <value>Invalid Format</value>
  </data>
  <data name="NoTimestampColName" xml:space="preserve">
    <value>There is no time stamp column name.</value>
  </data>
  <data name="OpenFileDialogFilter" xml:space="preserve">
    <value>CSV file (*.csv)|*.csv</value>
  </data>
  <data name="OpenFileDialogTitle" xml:space="preserve">
    <value>Data layer definition information file</value>
  </data>
  <data name="OutputFileRootFolderNotExist" xml:space="preserve">
    <value>Root folder (Dao class file, SQL file. Etc) of the output file does not exist.</value>
  </data>
  <data name="OutputFolderPath" xml:space="preserve">
    <value>Specifies the root folder path (Dao file, SQL file) of the output file</value>
  </data>
  <data name="PrimaryKeyNotDefined" xml:space="preserve">
    <value>Primary key is not defined in the table.</value>
  </data>
  <data name="RuntimeError" xml:space="preserve">
    <value>Is a run-time error:</value>
  </data>
  <data name="StringIndentation" xml:space="preserve">
    <value>In front of, I can only be specified indent:.</value>
  </data>
  <data name="TempFilenotExists" xml:space="preserve">
    <value>Template file does not exist. :</value>
  </data>
  <data name="TemplateFolderPath" xml:space="preserve">
    <value>Specifies the root folder path input file (template file)</value>
  </data>
  <data name="DLayerCancelledmessage" xml:space="preserve">
    <value>The operation was canceled.</value>
  </data>
  <data name="ToolTipText" xml:space="preserve">
    <value>This field is optional.</value>
  </data>
</root>